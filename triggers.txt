

##country scope
###Returns true if the country has hired an advisor of the specified type which has at least level X.
alias[trigger:<advisor_type>] = int[1..3]

##country scope
###Returns true if the country has at least X buildings from the specified building type.
alias[trigger:<building>] = int

##country scope
###Returns true if the country has at least X ideas from the specified idea group.
alias[trigger:<idea_group>] = int[1..8]

##country scope
###Returns true if the support for the specified institution in the province is at least X.
alias[trigger:<institution>] = int[0..100]

##country scope
###Returns true if the country has a tolerance of at least X of the specified religion. Note: No correct localisation.
alias[trigger:<religion>] = int

##country scope
###Returns true if the country has at least X provinces producing the specified trade good.
alias[trigger:<trade_good>] = int

##country scope
###Returns true if the country has at least X absolutism.
alias[trigger:absolutism] = int[0..100]

##country scope
###Returns true if the country accepts the specified culture.
alias[trigger:accepted_culture] = <culture> #todo
alias[trigger:accepted_culture] = scope[province]

##country scope
###Returns true if X is the current mission of the country.
alias[trigger:active_major_mission] = <mission> #todo

##country scope
###Returns true if the country has a ruler with an administrative skill of at least X.
alias[trigger:adm] = int[0..6]

##country scope
###Returns true if the country has at least X administrative power, or at least as much as the specified country.
alias[trigger:adm_power] = int
alias[trigger:adm_power] = scope[country]
alias[trigger:adm_power] = <country_tag> #todo

##country scope
###Returns true if the country has an administrative technology of at least X.
alias[trigger:adm_tech] = int[0..200]

##country scope
###Returns true if the country has an advisor of the specified type.
alias[trigger:advisor] = <advisor_type> #todo

##country scope
###Returns true if the advisor X exists.
alias[trigger:advisor_exists] = <advisor_id> #todo

##country scope
###Returns true if the country is controlled by the AI.
alias[trigger:ai] = bool

##country scope
###Returns true if the country has the specified attitude towards country X.
alias[trigger:ai_attitude] = {
	who = scope[country]
	who = <country_tag>
	attitude = <attitude>
}

##country scope
###Returns true if the country has an alliance with X.
alias[trigger:alliance_with] = scope[country]
alias[trigger:alliance_with] = <country_tag> #todo

##anywhere
###Returns true if females can become emperor.
alias[trigger:allows_female_emperor] = bool

##anywhere
###Returns true under all circumstances if set to yes, returns false under all circumstances if set to no.	
alias[trigger:always] = bool

##province scope
###Returns true if the province is part of the area X.
alias[trigger:area] = <area>

##country scope
###Returns true if the country has an army of at least X k soldiers, or at least as many soldiers as the specified country.
alias[trigger:army_size] = int
alias[trigger:army_size] = scope[country]
alias[trigger:army_size] = <country_tag>

##country scope
###Returns true if the total army size of the country is at least X% of its land force limit.
alias[trigger:army_size_percentage] = float

##country scope
###Returns true if the country's army size is at least the size of X times the army size of the specified country.
alias[trigger:army_strength] = {
	who = scope[country]
	who = <country_tag>
	value = float
}

##country scope
###Returns true if the country has an army tradition of at least X, or at least as high as the specified country.
alias[trigger:army_tradition] = int[0..100]
alias[trigger:army_tradition] = scope[country]
alias[trigger:army_tradition] = <country_tag>

##country scope
###Returns true if the ratio of the artillery fraction to the army size of the country is at least X.
alias[trigger:artillery_fraction] = float[0.0..1.0]

##province scope
###Returns true if there are at least X artillery units in the province, or if there are artillery units from the specified country in the province.
alias[trigger:artillery_in_province] = int
alias[trigger:artillery_in_province] = scope[country]
alias[trigger:artillery_in_province] = <country_tag>

##country scope
###Returns true if the country is at war with any country of a different religion.
alias[trigger:at_war_with_religious_enemy] = bool

##country scope
###Returns true if the country has at least X authority, or if the country has at least as much authority as the specified country.
alias[trigger:authority] = int[0..100] #todo: What is authority? If it is imperial authority, it can be 0-100, but how can it be more for one country than for another?
alias[trigger:authority] = scope[country]
alias[trigger:authority] = <country_tag>

##country scope
###Returns true if the country has an average autonomy in its provinces of at least X.
alias[trigger:average_autonomy] = int[0..100]

##country scope
###TODO: Needs description
alias[trigger:average_autonomy_above_min] = int[0..100]

##country scope
###TODO: Needs description
alias[trigger:average_effective_unrest] = int[0..100]

##country scope
###Returns true if the country has an average autonomy in its provinces excluding overseas provinces is at least X.
alias[trigger:average_home_autonomy] = int[0..100]

##country scope
###Returns true if the country has an average unrest in its provinces of at least X.
alias[trigger:average_unrest] = int[0..100]

##province scope
###Returns true if the base manpower of the province is at least X.
alias[trigger:base_manpower] = int[0..100]

##province scope
###Returns true if the base production of the province is at least X.
alias[trigger:base_production] = int[0..100]

##province scope
###Returns true if the base tax of the province is at least X.
alias[trigger:base_tax] = int[0..100]

##country scope
###Returns true if the blockade penalty of the country is at least X%.
alias[trigger:blockade] = int[0..100]

##country scope
###Returns true if distance between the borders of the countries is at least X.
alias[trigger:border_distance] = {
	who = scope[country]
	who = <country_tag>
	distance = int
}

##anywhere
###Returns true if at least amount number of targets within the specified scope match the specified conditions
alias[trigger:calc_true_if] = { #todo: find out what all can go in this
	all_country = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	amount = int
}

##country scope
###Returns true if country meets the conditions defined in the subject type's is_potential_overlord section.
alias[trigger:can_be_overlord] = <subject_type> #todo

##province scope
###Returns true if the specified building can be built in the province.
alias[trigger:can_build] = <building> #todo

##country scope
###Returns true if the country can create a vassal. Warning: Interprets anything after ‘=’ as “yes”. Note: Works only for independent countries.
alias[trigger:can_create_vassals] = yes #deliberate

##country scope
###Returns true if the country’s heir can potentially be the consort’s child.
alias[trigger:can_heir_be_child_of_consort] = bool

##country scope
###Returns true if the country can justify a trade conflict against country X.
alias[trigger:can_justify_trade_conflict] = scope[country]
alias[trigger:can_justify_trade_conflict] = <country_tag>

##province scope
###Returns true if the specified rebel faction is a valid rebel faction of the province.
alias[trigger:can_spawn_rebels] = <rebel_type> #todo

##country scope
###Returns true if the country's capital is the province with the ID X.
alias[trigger:capital] = <province_id> #todo

##country scope
###Returns true if distance between the capitals of the countries is at least X.
alias[trigger:capital_distance] = {
	who = scope[country]
	who = <country_tag>
	distance = int
}

##region scope
###Returns true if trade node capital is X.
alias[trigger:capital_trade_node] = <province_id>

##country scope
###Returns true if the ratio of the cavalry fraction to the army size of the country is at least X.
alias[trigger:cavalry_fraction] = float[0.0..1.0]

##province scope
###Returns true if there are at least X cavalry units in the province, or if there are cavalry units from the specified country in the province.
alias[trigger:cavalry_in_province] = int
alias[trigger:cavalry_in_province] = scope[country]
alias[trigger:cavalry_in_province] = <country_tag>

##country scope
###Returns true if the specified variable is at least X.
alias[trigger:check_variable] = {
	which = scalar
	value = int
}

## scope = Country
###Returns true if the country has at least X church power, or at least as much as the specified country.
alias[trigger:church_power] = int[0..100]
alias[trigger:church_power] = scope[country]
alias[trigger:church_power] = <country_tag>

## scope = Country
###Returns true if the country is the target of a coalition.
alias[trigger:coalition_target] = scope[country]
alias[trigger:coalition_target] = <country_tag>

## scope = [scope needed]
###Returns true if ... has gotten a colonial grant for the scope's colonial region from any potential pope-like entities.
alias[trigger:colonial_claim_by_anyone_of_religion] = <religion> #todo: how does this work?

## scope = Province
###Returns true if the province is part of the colonial region X.
alias[trigger:colonial_region] = <colonial_region> #todo

## scope = Country
###Returns true if country has claim on colony
alias[trigger:colony_claim] = scope[country]
alias[trigger:colony_claim] = <country_tag>

## scope = Province
###Returns true if colony is at least size X.
alias[trigger:colonysize] = int

## scope = Country
###Returns true if the country has a consort with an administrative skill of at least X.
alias[trigger:consort_adm] = int[0..6]

## scope = Country
###Returns true if the country's consort has an age of at least X.
alias[trigger:consort_age] = int

## scope = Country
###Returns true if the country has a consort with an diplomatic skill of at least X.
alias[trigger:consort_dip] = int[0..6]

## scope = Country
###Returns true, if the country's consort has the specified culture. Can utilise Event Scope Values.
alias[trigger:consort_culture] = <culture>
alias[trigger:consort_culture] = scope[country] #todo: I assume province works here (and elsewhere) too
alias[trigger:consort_culture] = <country_type>

## scope = Country
###Returns true if the country's consort has the specified personality.
alias[trigger:consort_has_personality] = <personality>

## scope = Country
###Returns true if the country has a consort with an military skill of at least X.
alias[trigger:consort_mil] = int[0..6]

## scope = Country
###Returns true, if the country's consort has the specified religion. Can utilise Event Scope Values.
alias[trigger:consort_religion] = <religion>
alias[trigger:consort_religion] = scope[country] #todo: I assume province works here (and elsewhere) too
alias[trigger:consort_religion] = <country_type>

## scope = Province
###Returns true if the construction progress is at least X%.
alias[trigger:construction_progress] = float[0.0..1.0]

## scope = Province
###Returns true if the province is located on continent X.
alias[trigger:continent] = <continent>

## scope = Province
###Returns true if the province is controlled by X.
alias[trigger:controlled_by] = scope[country]
alias[trigger:controlled_by] = <country_tag>

## scope = Country
###Returns true if the province with id X is controlled by the country.
alias[trigger:controls] = <province_id>

## scope = Country
###Returns true if the country has a core on any province owned by country X.
alias[trigger:core_claim] = scope[country]
alias[trigger:core_claim] = <country_tag>

## scope = Country
###Returns true if the country has cored at least X% of its provinces.
alias[trigger:core_percentage] = float[0.0..1.0]

## scope = Country
###Returns true if the country has a corruption of at least X.
alias[trigger:corruption] = float

## scope = Province
###Returns true if the province is part of the specified country or its subjects.
alias[trigger:country_or_vassal_holds] = scope[country]
alias[trigger:country_or_vassal_holds] = <country_tag>

## scope = Province
###Returns true if the province culture is X.
alias[trigger:culture] = <culture>

## scope = Country, Province
###Returns true if the country/province has a culture of the specified culture group.
alias[trigger:culture_group] = <culture_group>

## scope = Country
###Returns true if country's primary culture is the same culture group as any province owned by country X.
alias[trigger:culture_group_claim] = scope[country]
alias[trigger:culture_group_claim] = <country_tag>

## scope = Anywhere
###Returns true, if the current age is X.
alias[trigger:current_age] = <game_age> #todo

## scope = Country
###Returns true if the parliament of the country debates about X.
alias[trigger:current_debate] = <parliamentary_debate> #todo

## scope = Country
###Returns true, if the country has the specified (orthodox) icon.
alias[trigger:current_icon] = <orthodox_icon> #todo

## scope = Country, Province
###Returns true, if the country/province has an institution growth of at least X for the first not embraced institution.
alias[trigger:current_institution_growth] = float

## scope = Country
###Returns true if the parliament of the country has a least X seats.
alias[trigger:current_size_of_parliament] = int

## scope = Anywhere
###Hides the enclosed condition so that it is still required but cannot be seen by human players and displays the specified tooltip in its place.
alias[trigger:custom_trigger_tooltip] = {
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = Country
###Returns true if the country is in a defensive war with country X.
alias[trigger:defensive_war_with] = scope[country]
alias[trigger:defensive_war_with] = <country_tag>

## scope = Province
###Returns true if the devastation of the province is at least X.
alias[trigger:devastation] = int

## scope = Province
###Returns true if the development of the province is at least X.
alias[trigger:development] = int

## scope = Country
###Returns true, if the country has X percent of its overlord's development
alias[trigger:development_of_overlord_fraction] = float[0.0..1.0]

## scope = Country
###Returns true if the country has at least X devotion, or at least as much devotion as the specified country.
alias[trigger:devotion] = int
alias[trigger:devotion] = scope[country]
alias[trigger:devotion] = <country_tag>

## scope = Country
###Returns true if the country has a ruler with a diplomatic skill of at least X.
alias[trigger:dip] = int[0..6]


## scope = Country
###Returns true if the country has a diplomatic reputation of at least X, or at least as much diplomatic reputation as the specified country.
alias[trigger:diplomatic_reputation] = int
alias[trigger:diplomatic_reputation] = scope[country]
alias[trigger:diplomatic_reputation] = <country_tag>

## scope = Country
###Returns true if the country has at least X diplomatic power, or at least as much diplomatic power as the specified country.
alias[trigger:dip_power] = int
alias[trigger:dip_power] = scope[country]
alias[trigger:dip_power] = <country_tag>

## scope = Country
###Returns true if the country has an diplomatic technology of at least level X.
alias[trigger:dip_tech] = int

## scope = Country
###Returns true if the dominant culture in the country is X.
alias[trigger:dominant_culture] = <culture> #todo: wiki says "capital"

## scope = Country
###Returns true if the dominant religion in the country is X.
alias[trigger:dominant_religion] = <religion> #todo: wiki says "capital"

## scope = Country
###Returns true if the country has at least X doom, or at least as much doom as the specified country.
alias[trigger:doom] = int
alias[trigger:doom] = scope[country]
alias[trigger:doom] = <country_tag>

## scope = Country
###Returns true if the ruling dynasty of the country is X, or is the same as that of country X.
alias[trigger:dynasty] = scalar #todo: dynasty name e.g. "von Habsburg"
alias[trigger:dynasty] = scope[country]
alias[trigger:dynasty] = <country_tag>

## scope = Anywhere
###Returns true if at least X Empire of China reforms are enacted. Works similar to hre_reform_level
alias[trigger:empire_of_china_reform_level] = int

## scope = Country
###Returns true if the country has employed an advisor with the specified characteristics.
alias[trigger:employed_advisor] = {
	## cardinality = 0..1
	is_male = bool
	## cardinality = 0..1
	religion = <religion>
	## cardinality = 0..1
	religion = scope[country]
	## cardinality = 0..1
	religion = <country_tag>
	## cardinality = 0..1
	culture = <culture>
	## cardinality = 0..1
	culture = scope[country]
	## cardinality = 0..1
	culture = <country_tag>
	## cardinality = 0..1
	type = <advisor_type>
}

## scope = Country
###Returns true if the estate X in the country has at least Y influence.
alias[trigger:estate_influence] = {
    estate = <estate>
    influence = int[0..100]
}

## scope = Country
###Returns true if the estate X in the country has at least Y loyalty.
alias[trigger:estate_loyalty] = {
    estate = <estate>
    influence = int[0..100]
}

## scope = Country
###Returns true if the estate X in the country controls at least Y% of the total development.
alias[trigger:estate_loyalty] = {
    estate = <estate>
    territory = int[0..100]
}

## scope = Anywhere
###Returns true if country X or the scoped country exists.
alias[trigger:exists] = <country_tag> #todo: how about exists = FROM?
alias[trigger:exists] = bool


## scope = Country
###Returns true if the faction in power of the country is X.
alias[trigger:faction_in_power] = <faction>

## scope = Country
###Returns true if the faction X of the country has at least Y influence.
alias[trigger:faction_influence] = {
	faction = <faction>
	influence = int
}

## scope = Country
###Returns true if the federation with the country has at least X members.
alias[trigger:federation_size] = int

## scope = Country
###Returns true if the country has stored at least X fervor points.
alias[trigger:fervor] = int

## scope = Province
###Returns true if the fort in the province has at least level X.
alias[trigger:fort_level] = int

## scope = Country
###Returns true if the country has completed the X idea group.
alias[trigger:full_idea_group] = <idea_group>

## scope = Country
###Returns true if the ratio of the galley fraction to the navy size of the country is at least X.
alias[trigger:galley_fraction] = float[0..1]

## scope = Province
###Returns true if there are at least X galleys in the province, or if there are galleys from the specified country in the province.
alias[trigger:galleys_in_province] = int
alias[trigger:galleys_in_province] = scope[country]
alias[trigger:galleys_in_province] = <country_tag>

## scope = Province
###Returns true if the garrison is at X men. Note: Misleading tooltip.
alias[trigger:garrison] = int

## scope = Country
###Returns true if the country has an income from gold of at least X.
alias[trigger:gold_income] = float

## scope = Country
###Returns true if in the country the proportion of income from gold is at least X.
alias[trigger:gold_income_percentage] = float[0.0..1.0]

## scope = Country
###Returns true if the country has government type X.
alias[trigger:government] = <government_group> #todo (monarchy, republic, theocracy)
alias[trigger:government] = <government> #todo
alias[trigger:government] = tribal

## scope = Country
###Returns true if the country has a government rank of X or higher.
alias[trigger:government_rank] = int

## scope = Country
###Returns true if the country's total development has grown by the specified amount
alias[trigger:grown_by_development] = int

#todo: "or worse???"
## scope = Country
###Returns true if the country has a great power rank of X or worse. (Please tell Caligula if that is correct)
alias[trigger:great_power_rank] = int

## scope = Country
###Returns true if the country is guaranteed by X.
alias[trigger:guaranteed_by] = scope[country]
alias[trigger:guaranteed_by] = <country_tag>

## scope = Country
###Returns true if the country still has had the specified policy for at least X days.
alias[trigger:had_active_policy] = {
	policy = <policy>
	days = int
}

## scope = Country
###Returns true if the consort flag X was last set at least Y days ago.
alias[trigger:had_consort_flag] = {
	flag = scalar
	days = int
}

## scope = Country
###Returns true if the country flag X was last set for the country at least Y days ago.
alias[trigger:had_country_flag] = {
	flag = scalar
	days = int
}

## scope = anywhere
###Returns true if the global flag X was last set at least Y days ago.
alias[trigger:had_global_flag] = {
	flag = scalar
	days = int
}

## scope = Country
###Returns true if the heir flag X was last set at least Y days ago.
alias[trigger:had_heir_flag] = {
	flag = scalar
	days = int
}

## scope = province
###Returns true if the province flag X was last set for the province at least Y days ago.
alias[trigger:had_province_flag] = {
	flag = scalar
	days = int
}

## scope = Country
###Returns true if the country fought a war within the last X years.
alias[trigger:had_recent_war] = int

## scope = Country
###Returns true if the ruler flag X was last set for the current ruler at least Y days ago.
alias[trigger:had_ruler_flag] = {
	flag = scalar
	days = int
}



harmonization_progress	Integer	Returns true, if the country's current harmonization progress is at least at X.	Country	harmonization_progress = 90
harmony	Integer	Returns true, if the country has at least X harmony.	Country	harmony = 50
has_active_debate	Boolean	Returns true if the country has ongoing debate in parliament.	Country	has_active_debate = yes
has_active_fervor	Boolean	Returns true if the country has activated a fervor effect.	Country	has_active_fervor = no
has_active_policy	Identifier	Returns true if country has the specified policy active.	Country	has_active_policy = noble_loyalty_act
has_adopted_cult	Identifier	Returns true if the country has adopted the specified cult.	Country	has_adopted_cult = roog_cult
has_advisor	Boolean	Returns true if the country has hired an advisor.
Warning: Inteprets every right side argument as yes.	Country	has_advisor = yes
has_age_ability	Identifier	Returns true, if the country has the specified age ability.	Country	has_age_ability = ab_justified_wars
has_any_disaster	Boolean	Returns true if the country is currently in a disaster.	Country	has_any_disaster = no
has_border_with_religious_enemy	yes	Returns true if the country borders any country of a different religion.
Warning: Interprets anything after ‘=’ as “yes”.	Country	has_border_with_religious_enemy = yes
has_building	Identifier	Returns true if there is the specified building in the province.	Province	has_building = fort_15th
has_cardinal	Boolean	Returns true if the province has a cardinal in the curia.	Province	has_cardinal = yes
has_casus_belli	Clause	Returns true if the country has a casus belli of type X against country Y.	Country	
has_casus_belli = {
	type = cb_trade_war_triggered
	target = TOT
}
has_casus_belli_against	Tag, Scope	Returns true if the country has a casus belli against country X.	Country	has_casus_belli_against = PREV
has_changed_nation	Boolean	Returns true if playing as a released vassal.		has_changed_nation = yes
has_church_aspect	Identifier	Returns true if the country has enabled the church aspect X.	Country	has_church_aspect = allow_usury_aspect
has_climate	Identifier	Returns true if the province has climate X.	Province	has_climate = tropical
has_colonial_parent	Tag	Returns true if the specified country is the colonial parent of the country.	Country	has_colonial_parent = GBR
has_colonist	Boolean	Returns true if scoped province has an active colonist	Province	has_colonist = yes
has_commanding_three_star	Boolean	Returns true, if country has a three star general.	Country	has_commanding_three_star = yes
has_consort	Boolean	Returns true if the country has a consort.	Country	has_consort = yes
has_consort_flag	Identifier	Returns true if the consort flag X is set.	Country	has_consort_flag = royal_couple_shared_adm_interests
has_consort_regency	Boolean	Returns true if the country has a consort regency.	Country	has_consort_regency = yes
has_construction	Identifier	Returns true if there is the specified construction in progress in the province.
Possible values are core, culture, building, merchant, diplomat, missionary, army, navy, canal, great_project etc.	Province	has_construction = core
has_country_flag	Identifier	Returns true if the flag X is set for the country.	Country	has_country_flag = zan_shirazi_islam_confirmed
has_country_modifier	Identifier	Returns true if the country has the modifier X.	Country	has_country_modifier = western_embassy_mission
has_custom_ideas	Boolean	Returns true if the country has custom ideas.	Country	has_custom_ideas = yes
has_disaster	Identifier	Returns true if the country is currently in the disaster X.	Country	has_disaster = time_of_troubles
has_disaster_progress	Clause	Returns true if the disaster progress of the specified disaster is at least X in the country.	Country	
has_disaster_progress = {
	disaster = time_of_troubles
	value = 50
}
has_discovered	Province ID, Scope	Returns true if the country has discovered the province with the ID X.	Country	has_discovered = 313
Tag, Scope	Returns true if the country X has discovered the province.	Province	has_discovered = ROOT
has_dlc	Identifier	Returns true if the DLC X is enabled.	Anywhere	has_dlc = "The Cossacks"
has_divert_trade	Boolean	Returns true if the protectorate has divert trade to its overlord.	(Subject) Country	has_divert_trade = yes
has_embargo_rivals	Boolean	Returns true if the subject nation is embargoing overlord's rivals.	(Subject) Country	has_embargo_rivals = no
has_empty_adjacent_province	yes	Returns true if an adjacent province is uncolonized.
Warning: Works only with 'yes'.	Province	has_empty_adjacent_province = yes
has_estate	Identifier	Returns true if the country has estate X.	Country	has_estate = estate_dhimmi
has_estate	Boolean	Returns true if the province is controlled by an estate.	Province	has_estate = no
Identifier	Returns true if the province is controlled by the estate X.	Province	has_estate = estate_church
has_estate_influence_modifier	Clause	Returns true if the estate X in the country has the influence modifier Y.	Country	
has_estate_influence_modifier = {
	estate = estate_church
	modifier = EST_VAL_RELIGIOUS_ZEALOTS_TRIUMPH
}
has_estate_loyalty_modifier	Clause	Returns true if the estate X in the country has the loyalty modifier Y.	Country	
has_estate_loyalty_modifier = {
    estate = estate_nobles
    modifier = EST_VAL_NOT_LEGITIMATE
}
has_faction	Idenitifer	Returns true if the country has the specified faction.	Country	has_faction = enuchs
has_factions	Boolean	Returns true if country has factions.	Country	has_factions = yes
has_female_consort	Boolean	Returns true if the country has a female consort.	Country	has_female_consort = yes
has_female_heir	Boolean	Returns true if the country has a female heir.	Country	has_female_heir = yes
has_first_revolution_started	Boolean	Returns true if a revolution has happened in the world.	Anywhere	has_first_revolution_started = yes
has_foreign_consort	Boolean	Returns true if the country has foreign consort.	Country	has_foreign_consort = no
has_foreign_heir	Boolean	Returns true if the country has foreign heir.	Country	has_foreign_heir = no
has_friendly_reformation_center	Boolean	Returns true if the country has a friendly center of reformation.	Country	has_friendly_reformation_center = yes
has_game_started	Boolean	Returns true if the game has started.	Clobal	has_game_started = no
has_given_consort_to	Scope, Tag	Returns true if the scoped country has given a consort to the specified country.	Country	has_given_consort_to = ROOT
has_great_project	Identifier	Returns true if the country has the specified great project.	Province	has_great_project = kiel_canal
has_guaranteed	Tag, Scope	Returns true if the country has guaranteed country X.	Country	has_guaranteed = TUR
has_global_flag	Identifier	Returns true if the specified global flag is set.	Anywhere	has_global_flag = japan_has_encountered_the_west
has_global_modifier_value	Clause	Returns true if the value of the specified modifier is at least X for the country.	Country	
has_global_modifier_value = {
	which = cavalry_power
	value = 0.5
}
has_government_mechanic	Identifier	Returns true, if the country uses the specified government mechanic.	Country	has_government_mechanic = russian_mechanic
has_government_power	[type needed]	[description needed]	Country	[example needed]
has_harmonized_with	Identifier, Scope	Returns true, if the country has harmonized with the specified religion or religion group.	Country	has_harmonized_with = tengri_pagan_reformed
has_harsh_treatment	Boolean	[description needed]	[scope needed]	has_harsh_treatment = yes
has_heir	Boolean, Name	Returns true if the country has an heir (named X).	Country	has_heir = yes
has_heir_flag	Identifier	Returns true if the heir flag X is set.	Country	has_heir_flag = suspected_bastard
has_heir_leader_from	Tag, Scope	Returns true if an army in the province is led by an heir from X.	Province	has_heir_leader_from = ROOT
has_hostile_reformation_center	Boolean	Returns true if the country has a hostile center of reformation.	Country	has_hostile_reformation_center = yes
has_idea	Identifier	Returns true if the country has the X idea.	Country	has_idea = grand_navy
has_idea_group	Identifier	Returns true if the country has chosen the X idea group.	Country	has_idea_group = humanist_ideas
has_influencing_fort	Boolean	Returns true if the province has an influencing fort.	Province	has_influencing_fort = yes
has_institution	Identifier	Returns true if the country has the specified institution.	Country	has_institution = feudalism
has_leader	Identifier	Returns true if the country has the leader "X".	Country	has_leader = "János Hunyadi"
has_leader_with	Clause	Returns true if the country has a leader with at least the specified stats.
admiral = yes and general = yes can be used as further limitation.	Country	
has_leader_with = {
	fire = 3
	shock = 3
	manuever = 2
	siege = 1
}
has_local_modifier_value	Clause	Returns true if the value of the specified modifier is at least X for the province.	Province	
has_local_modifier_value = {
	which = local_production_efficiency
	value = 0.15
}
has_matching_religion	Identifier	Returns true if the country has the specified religion or syncretic faith.	Country	has_matching_religion = mahayana
Scope	Returns true if the countries have the same religion or syncretic faith.	Country	has_matching_religion = ROOT
has_merchant	Tag, Scope	Returns true if the scoped country has an active merchant in the trade node.	Province
(Trade node)	has_merchant = PREV
has_missionary	Boolean	Returns true if the province has an active missionary.	Province	has_missionary = yes
has_most_province_trade_power	Tag, Scope	Returns true if the country X has most amount of trade power in trade node.	Province
(Trade node)	has_most_province_trade_power = ROOT
has_new_dynasty	Boolean	Returns true if the country has a new dynasty.	Country	has_new_dynasty = yes
has_opinion	Clause	Returns true if the country has at least value opinion of the country specified by who.	Country	
has_opinion = 
	who = ROOT
	value = 10
}
has_opinion_diff	Clause	Returns true if opinion difference between country X and Y, is at least Z	Country	
has_opinion_modifier	Clause	Returns true if the country has the opinion modifier modifier towards the country specified by who.
Can also specify a value of the modifier (but it is not displayed).	Country	
has_opinion_modifier = {
	who = ROOT
	modifier = embraced_absolutism
}
has_owner_accepted_culture	Boolean	Returns true if the culture of the province is accepted by its owner.	Province	has_owner_accepted_culture = yes
has_owner_culture	Boolean	Returns true if the province has the culture of its owner.	Province	has_owner_culture = no
has_owner_religion	Boolean	Returns true if the province has the religion of its owner.	Province	has_owner_religion = yes
has_parliament	Boolean	Returns true if the country has a parliament.	Country	has_parliament = yes
has_personal_deity	Identifier	Returns true if the ruler of the country has picked the specified personal deity.	Country	has_personal_deity = shakti
has_port	Boolean	Returns true if it is a coastal province.	Province	has_port = yes
has_privateers	Boolean	Returns true if the country has privateers in any trade node.	Country	has_privateers = yes
has_promote_investments	Identifier	Returns true if the country is promoting investments in the specified trade company (region).	Country	has_promote_investments = trade_company_moluccas
has_province_flag	Identifier	Returns true if the province has the province flag X.	Province	has_province_flag = bur_succession_province
has_province_modifier	Identifier	Returns true if province has the province modifier X.	Province	has_province_modifier = local_christian_mission
has_rebel_faction	Identifier	Returns true if the province is controlled by (the specified) rebel faction.	Province	has_rebel_faction = pretender_rebels
REB	Used by Paradox, doesn't seem to work though (in EU4 version 1.25).	Province	has_rebel_faction = REB
has_regency	Boolean	Returns true if the country has a regency.	Country	has_regency = no
has_removed_fow	Boolean	Returns true if the country has lifted the fog of war from the specified country.	Country	FRA = { has_removed_fow = yes }
has_ruler	Name	Returns true if the country has a ruler named "X".	Country	has_ruler = "Pachacuti"
has_ruler_flag	Identifier	Returns true if the ruler flag X is set for the country.	Country	has_ruler_flag = helped_rival
has_ruler_leader_from	Tag, Scope	Returns true if an army in the province is led by a ruler from X.	Province	has_ruler_leader_from = ROOT
has_ruler_modifier	Identifier	Returns true the country has the modifier X until the ruler changes.	Country	has_ruler_modifier = inside_man
has_saved_event_target	Identifier	Returns true if the specified event target has been saved.		has_saved_event_target = muslim_neighbor
has_scutage	Boolean	Returns true if the vassal pays scutage.	(Subject) Country	has_scutage = yes
has_seat_in_parliament	Boolean	Returns true if the province has a seat in parliament.	Province	has_seat_in_parliament = no
has_secondary_religion	Boolean	Returns true if the county has a secondary religion.	Country	has_secondary_religion = yes
has_send_officers	Boolean	Returns true if the protectorate has received officers.	(Subject) Country	has_send_officers = yes
has_siege	Boolean	Returns true if the province has siege.	Province	has_siege = yes
has_spawned_rebels	Identifier	Returns true if rebels of the specified type are active in the country.	Country	has_spawned_rebels = particularist_rebels
has_spawned_supported_rebels	Scope	Returns true if rebels which were supported by the secified country are active in the country.	Country	has_spawned_supported_rebels = FROM
has_spy_network_from	Clause	Returns true if the country X has a spy network of at least the specified size in the country.	Country	
has_spy_network_from = {
	who = ROOT
	value = 25
}
has_spy_network_in	Clause	Returns true if the country has a spy network of at least the specified size in country X.	Country	
has_spy_network_in = {
	who = ROOT
	value = 25
}
has_state_patriach	Boolean	Returns true, if the province has any state patriarch.	Province	has_state_patriach = yes
has_subsidize_armies	Boolean	Returns true if the march has subsidizes armies.	(Subject) Country	has_subsidize_armies = yes
has_support_loyalists	Boolean	Returns true if the subject nation receives support for loyalists.	(Subject) Country	has_support_loyalists = yes
has_switched_nation	Boolean	Returns true if the player has changed nation by playing as a released vassal.	Anywhere	has_switched_nation = no
has_terrain	Identifier	Returns true if the province has terrain X.	Province	has_terrain = marsh
has_trade_modifier	Clause	Returns true the specified country has the trade modifier X in the trade node.	Province
(Trade node)	
has_trade_modifier = {
	who = ROOT
	key = income_bonanza
}
has_trader	Tag, Scope	Returns true if the specified country has a merchant in the trade node.	Province
(Trade node)	has_trader = VEN
has_truce	Country	Returns true if the country has truce.	Country	has_truce = KHM
has_unified_culture_group	Boolean	Returns true, if the country owns all provinces of its culture group.	Country	has_unified_culture_group = yes
has_unit_type	Identifier	Returns true if the country has selected unit type X as preferable unit.	Country	unit_type = polish_winged_hussar
has_unlocked_cult	Identifier	Returns true if the country has unlocked the specified cult.	Country	has_unlocked_cult = jewish_cult
has_wartaxes	Boolean	Returns true if the country has raised war taxes.	Country	has_wartaxes = yes
has_winter	Identifier	Returns true if the province has winter X.	Province	has_winter = normal_winter
heavy_ship_fraction	Float	Returns true if the ratio of the heavy ship fraction to the navy size of the country is at least X.	Country	heavy_ship_fraction = 0.33
heavy_ships_in_province	Integer	Returns true if there are at least X heavy ships in the province.	Province	heavy_ships_in_province = 2
Tag, Scope	Returns true if there are heavy ships from the specified country in the province.	Province	heavy_ships_in_province = TUN
heir_adm	Integer	Returns true if the country has an heir with an administrative skill of at least X.	Country	heir_adm = 5
heir_age	Integer	Returns true if the country has an heir that is at least X years old.	Country	heir_age = 15
heir_dip	Integer	Returns true if the country has an heir with a diplomatic skill of at least X.	Country	heir_dip = 5
heir_claim	Integer	Returns true if the country has an heir with a claim strength of at least X.	Country	heir_claim = 90
heir_culture	Identifier, Scope	Returns true, if the country's heir has the specified culture. Can utilise Event Scope Values.	Country	heir_culture = prussian
heir_has_consort_dynasty	Integer	Returns true if the country’s heir and consort have the same dynasty.	Country	heir_has_consort_dynasty = yes
heir_has_personality	Identifier	Returns true if the country’s heir has the specified personality.	Country	heir_has_personality = intricate_web_weaver_personality
heir_has_ruler_dynasty	Integer	Returns true if the country’s heir and ruler have the same dynasty.	Country	heir_has_ruler_dynasty = yes
heir_mil	Integer	Returns true if the country has an heir with a military skill of at least X.	Country	heir_mil = 5
heir_nationality	Tag, Scope	Returns true if the country has an heir with nationality X.	Country	heir_nationality = PREV
heir_religion	Identifier, Scope	Returns true, if the country's heir has the specified religion. Can utilise Event Scope Values.	Country	heir_religion = catholic
hidden_trigger	Clause	Hides the enclosed conditions so that they are still required but cannot be seen by human players.	Anywhere	
hidden_trigger = {
	NOT = {
		estate_influence = {
			estate = estate_nomadic_tribes
			influence = 85
		}
	}
}
highest_value_trade_node	Boolean	Returns true if the trade node is the highest valued trade node in the world.
The value is calculated as total trade value minus outgoing trade value.	Province
(Trade node)	highest_value_trade_node = yes
historical_friend_with	Tag, Scope	Returns true if the countries are historical friends.	Country	historical_friend_with = FROM
historical_rival_with	Tag, Scope	Returns true if the countries are historical rivals	Country	historical_rival_with = TEU
horde_unity	Integer	Returns true if the country has a horde unity of at least X.	Country	horde_unity = 50
Tag, Scope	Returns true if the country has at least as much horde unity as the specified country.	Country	horde_unity = GOL
hre_heretic_religion	Identifier, Scope	Returns true if the specified religion is the opposition religion of the HRE.
Note: No localisation for the negation.	Anywhere	hre_heretic_religion = catholic
hre_leagues_enabled	Boolean	Returns true religious leagues are enabled.	Anywhere	hre_leagues_enabled = yes
hre_reform_level	Integer	Returns true if the Xth imperial reform is enacted.	Anywhere	hre_reform_level = 6
hre_religion	Identifier, Scope	Returns true if the specified religion is the dominant faith of the HRE.	Anywhere	hre_religion = catholic
hre_religion_locked	Boolean	Returns true if an official faith of the HRE has been permanently established.	Anywhere	hre_religion_locked = no
hre_religion_treaty	Boolean	Returns true if the treaty of religious peace in the HRE has been signed.	Anywhere	hre_religion_treaty = no
hre_size	Integer	Returns true if the HRE contains at least X members.	Anywhere	hre_size = 10
imperial_influence	Integer	Returns true if the emperor of the HRE has an imperial authority of at least X.	Anywhere	imperial_influence = 25
imperial_mandate	Integer	Returns true, if the emperor of China has at least X mandate.	Anywhere	<imperial_mandate = 80</code>
in_golden_age	Boolean	Returns true, if the country currently is in a golden age.	Country	in_golden_age = yes
infantry_fraction	Float	Returns true if the ratio of the infantry fraction to the army size of the country is at least X.	Country	infantry_fraction = 0.6
infantry_in_province	Integer	Returns true if there are at least X infantry units in the province.	Province	infantry_in_province = 17
Tag, Scope	Returns true if there are infantry units from the specified country in the province.	Province	infantry_in_province = SHL
inflation	Float	Returns true if the country has an inflation of at least X	Country	inflation = 10
Tag, Scope	Returns true if the country has at least as much inflation as the country X.	Country	inflation = NOV
incident_variable_value	Clause	Returns true, if the value of the specified incident is at least X.	Country	
incident_variable_value = {
	incident = incident_neo_confucianism
	value = 10
}
institution_difference	Clause	Returns true if the country has embraced at least X more institutions than the specified country.	Country	
institution_difference = {
	who = SWE
	value = 2
}
invested_papal_influence	Integer	Returns true if the country has invested at least X papal influence in the election of the next papal controller.	Country	invested_papal_influence = 50
in_league	Identifier	Returns true if the countries is in the X league.	Country	in_league = protestant
ironman	Boolean	Returns true if the ironman mode is enabled	Anywhere	ironman = yes
is_advisor_employed	Advisor ID[1]	Returns true if the advisor with the ID X is employed.		is_advisor_employed = 562
is_at_war	Boolean	Returns true if the country is at war.	Country	is_at_war = yes
is_backing_current_issue	Boolean	Returns true if the province is backing the current issue in the parliament.	Province	is_backing_current_issue = yes
is_bankrupt	Boolean	Returns true if the country is bankrupt.	Country	is_bankrupt = yes
is_blockaded	Boolean	Returns true if the province is blockaded.	Province	is_blockaded = yes
is_capital	Boolean	Returns true if the province is a capital.	Province	is_capital = yes
is_city	Boolean	Returns true if the province is a city, i.e. has a population of at least 1000.	Province	is_city = yes
is_claim	Province id	Returns true if the country has a claim on the province with the ID X.	Country	is_claim = 337
Tag, Scope	Returns true if the specified country has a claim on the province.	Province	is_claim = MCH
is_client_nation	Boolean	Returns true if the country is a client state.	Country	is_client_nation = yes
is_client_nation_of	Tag, Scope	Returns true if the country is a client state of X.	Country	is_client_nation_of = ROOT
is_colonial_nation	Boolean	Returns true if the country is a non-independent colonial nation.	Country	is_colonial_nation = yes
is_colonial_nation_of	Tag, Scope	Returns true if the country is a colonial nation of X.	Country	is_colonial_nation_of = ROOT
is_colony	Boolean	Returns true if the province is a colony.	Province	is_colony = yes
is_core	Province ID	Returns true if the country has a core on the province with the ID X.	Country	is_core = 950
Tag, Scope	Returns true if the country X has a core on the province.	Province	is_core = NED
is_crusade_target	Boolean	Returns true if the country is the target of a crusade.	Country	is_crusade_target = yes
is_defender_of_faith	Boolean	Returns true if the country is the defender of the faith.	Country	is_defender_of_faith = yes
is_dynamic_tag	Boolean	Returns true, if the country is a dynamically created tag (e.g. client states).	Country	is_dynamic_tag = yes
is_elector	Boolean	Returns true if the country is an elector of the HRE.	Country	is_elector = yes
is_emperor	Boolean	Returns true if the country is the emperor of the HRE.	Country	is_emperor = yes
is_emperor_of_china	Boolean	Returns true if the country is the emperor of China.	Country	is_emperor_of_china = yes
is_empty	Boolean	Returns true if province is empty	Province	is_empty = yes
is_enemy	Boolean	Returns true the country views country X as an enemy.	Country	is_enemy = ROOT
is_excommunicated	Boolean	Returns true if the ruler of the country is excommunicated.	Country	is_excommunicated = yes
is_federation_leader	Boolean	Returns true if the country is a federation leader.	Country	is_federation_leader = yes
is_female	Boolean	Returns true if ruler of the country is female.	Country	is_female = yes
is_force_converted	Boolean	Returns true if country has been force-converted via either religious rebels or an Enforce Religion peace treaty.
Note: The subject interaction Enforce Religion does not cause the subject to be considered as force-converted.	Country	is_force_converted = no
is_former_colonial_nation	Boolean	Returns true if the country is a colonial nation that has gained independence.	Country	is_former_colonial_nation = no
is_great_power	Boolean	Returns true if the country is a great power.	Country	is_great_power = yes
is_harmonizing_with	Identifier, Scope	Returns true, if the country is currently harmonizing with the specified religion or religion group.	Country	is_harmonizing_with = tengri_pagan_reformed
is_heir_leader	Boolean	Returns true if the heir of the country is a general.
Note: Proper localisation for the negation only with NOT = ….	Country	is_heir_leader = yes
is_imperial_ban_allowed	Boolean	Returns true if the emperor has a casus belli on occupiers of the Empire.
Note: Enabled/Disabled with Call for Reichsreform.	Anywhere	is_imperial_ban_allowed = yes
is_incident_active	Identifier	Returns true, if the specified incident is active.	Country	is_incident_active = incident_neo_confucianism
Boolean, any, none	Returns true, if any/none incident is active.	Country	is_incident_active = any
is_incident_happened	Identifier	Returns true, if the specified incident already happened.	Country	is_incident_happened = incident_neo_confucianism
is_incident_possible	Identifier	Returns true, if the specified incident can possibly happen.	Country	is_incident_possible = incident_neo_confucianism
is_incident_potential	Identifier	Returns true, if the specified incident is visible and therefor can happen in the future.	Country	is_incident_potential = incident_neo_confucianism
is_institution_enabled	Identifier	Returns true if the specified institution has been discovered.	Anywhere	is_institution_enabled = renaissance
is_institution_origin	Identifier	Returns true if the province is the origin of the specified institution.	Province	is_institution_origin = printing_press
is_in_capital_area	Boolean	Returns true if the province is in the capital area of its owner (i.e. has a land connection to the owner’s capital through whose provinces).	Province	is_in_capital_area = yes
is_in_coalition	Boolean	Returns true if the country is in a coalition.	Country	is_in_coalition = no
is_in_coalition_war	Boolean	Returns true if the country is fighting a coalition war.	Country	is_in_coalition_war = yes
is_in_deficit	Boolean	Returns true if the country is running a deficit.	Country	is_in_deficit = yes
is_in_league_war	Boolean	Returns true if the country is in a religious league war.	Country	is_in_league_war = yes
is_in_trade_league	Boolean	Returns true if the country is a member of a trade league.	Country	is_in_trade_league = yes
is_in_trade_league_with	Tag, Scope	Returns true if the country is a member of the same trade league as country X.	Country	is_in_trade_league = VEN
is_in_war	Clause	Returns true if the country is at war and the mentioned conditions are fulfilled.
Possible are: attacker_leader, defender_leader, casus_belli, defenders, attackers, participants, war_score, start_date, duration, war_goal_province.	Country	
is_in_war = {
    attacker_leader = ROOT
    duration = 1875
}
is_island	Boolean	Returns true if the province is an island, i.e. has no neighboring land province and no reachable province via a strait.	Province	is_island = yes
is_league_enemy	Scope	Returns true if country X is league enemy of the country('s league).	Country	is_league_enemy = ROOT
is_league_friend	Scope	Returns true, if the country is in the same religious league as the specified country.	Country	is_league_friend = ROOT
is_league_leader	Boolean	Returns true if the country leads a religious league.	Country	is_league_leader = yes
is_lesser_in_union	Boolean	Returns true if the country is the lesser partner in a personal union.	Country	is_lesser_in_union = no
is_looted	Boolean	Returns true if the province is looted.	Province	is_looted = yes
is_monarch_leader	Boolean	Returns true if the rulerof the country is a general.
Note: Proper localisation for the negation only with NOT = ….	Country	is_monarch_leader = yes
is_month	Integer	Returns true if the current month is at least X (zero based).	Anywhere	is_month = 1 # February
is_march	Boolean	Returns true if the country is a march.	Country	is_march = yes
is_neighbor_of	Tag, Scope	Returns true if the country is neighbor of X.	Country	is_neighbor_of = FRA
is_node_in_trade_company_region	Boolean	Returns true, if the province's trade node is in a trade company region.	Province	is_node_in_trade_company_region = yes
is_nomad	Boolean	Returns true if country's government is nomadic.
(Note: Only the Steppe Nomads government is flagged as nomadic.)	Country	is_nomad = yes
is_orangists_in_power	Boolean	Returns true if in the country the orangists are in power.	Country	is_orangists_in_power = yes
is_origin_of_consort	Scope, Tag	Returns true if the specified country is the origin country of the scoped country’s consort.	Country	is_origin_of_consort = ROOT
is_overseas	Boolean	Returns true if the province is overseas	Province	is_overseas = yes
is_overseas_subject	Boolean	Returns true if the subject is overseas.	Country (subject)	is_overseas_subject = yes
is_owned_by_trade_company	Boolean	Returns true if the province belongs to a trade company.	Province	is_owned_by_trade_company = yes
is_papal_controller	Boolean	Returns true if the country is the papal controller.	Country	is_papal_controller = yes
is_part_of_hre	Boolean	Returns true if the country/province is part of the HRE.	Country
Province	is_part_of_hre = yes
is_permanent_claim	Tag, Scope	Returns true if the province is a permanent claim of X.	Province	is_permanent_claim = ROOT
is_playing_custom_nation	Boolean	Returns true if the country is a player-designed custom nation.	Country	is_playing_custom_nation = yes
is_possible_march	Tag, Scope	Returns true if vassal X is a possible march of the country.	Country	is_possible_march = ROOT
is_possible_vassal	Tag, Scope	Returns true if country X is releasable as vassal of the country.	Country	ENG = { is_possible_vassal = CRN }
is_previous_papal_controller	Boolean	Returns true if the country is the previous papal controller.	Country	is_previous_papal_controller = yes
is_prosperous	Boolean	Returns true if the province is prosperous. NOTE: Does not have a tooltip.	Province	is_prosperous = yes
is_protectorate	Boolean	Returns true if the country is a protectorate	Country	is_protectorate = yes
is_random_new_world	Boolean	Returns true if playing with a random New World.	Anywhere	is_random_new_world = no
is_reformation_center	Boolean	Returns true if the province is a reformation center.	Global	is_reformation_center = no
is_religion_grant_colonial_claim	Boolean, Tag, Scope	Returns true if the province has been granted to any country, to no country or to a specific country.	Province	is_religion_grant_colonial_claim = ROOT
is_religion_enabled	Identifier	Returns true if the specified religion is enabled.	Anywhere	is_religion_enabled = reformed
is_religion_reformed	Boolean	Returns true if the country has reformed their religion.	Country	is_religion_reformed = yes
is_revolution_target	Boolean	Returns true if the country is the revolution target.	Country	is_revolution_target = yes
is_rival	Tag, Scope	Returns true if country X is a rival of the country.	Country	is_rival = FRA
is_sea	Boolean	Returns true if the province is sea.
Mostly used for trade nodes.	Province	is_sea = yes
is_state	Boolean	Returns true if the province is in a state.	Province	is_state = yes
is_state_core	Province ID	Returns true if the country has a state core on the province with the ID X.	Country	is_state_core = 950
Tag, Scope	Returns true if the country X has a state core on the province.	Province	is_state_core = NED
is_statists_in_power	Boolean	Returns true if in the country the statists are in power.	Province	is_statists_in_power = yes
is_strongest_trade_power	Tag, Scope	Returns true if the specified country has the most trade power in the area.	Province
(Trade node)	is_strongest_trade_power = POR
is_subject	Boolean	Returns true if the country is a subject.	Country	is_subject = yes
is_subject_of	Tag	Returns true if the country is a subject of X.	Country	is_subject_of = FRA
is_subject_of_type	Identifier	Returns true if the country is a subject of subject type.	Country	is_subject_of_type = tributary_state
is_territorial_core	Province ID	Returns true if the country has a territorial core on the province with the ID X.	Country	is_territorial_core = 950
Tag, Scope	Returns true if the country X has a territorial core on the province.	Province	is_territorial_core = NED
is_territory	Boolean	Returns true if the province is in a territory.	Province	is_territory = no
is_threat	Tag, Scope	Returns true if country X is threatened by the country.	Country	is_threat = ROOT
is_trade_league_leader	Boolean	Returns true if the country is the leader of a trade league.	Country	is_trade_league_leader = yes
is_tribal	Boolean	Returns true if the country has a tribal government.
(Note: Government types that allow migration are not considered tribal.)	Country	is_tribal = yes
is_vassal	Boolean	Returns true if the country is a vassal.	Country	is_vassal = yes
is_variable_equal	Clause	Returns true if the specified variable is equal to X.		
is_variable_equal = {
	which = myvar
	value = 5
}
is_wasteland	Boolean	Returns true if the province is wasteland.	Province	is_wasteland = yes
is_year	Integer	Returns true if the current year is at least X.	Anywhere	is_year = 1750
island	Boolean	Returns true if the province is an island, i.e. has no neighboring land provinces.	Province	island = yes
isolationism	Integer	Returns true, if the country has a isolationism level of at least X.	Country	isolationism = 2
janissary_percentage	Float	Returns true if the country has an army of at least X k janissaries.
Cradle of Civilization.png Available only with the Cradle of Civilization DLC enabled.	Country	janissary_percentage = 0.3
junior_union_with	Tag, Scope	Returns true if the country is the junior partner in a personal union under country X.	Country	junior_union_with = ENG
karma	Integer	Returns true if the country has a karma of at least X.	Country	karma = -50
Tag, Scope	Returns true if the country has at least as much karma as the specified country.	Country	karma = DAI
knows_country	Tag. Scope	Returns true if the country has knowledge of country X.	Country	knows_country = INC
land_forcelimit	Integer	Returns true if the country has a land force limit of at least X.	Country	land_forcelimit = 32
Tag, Scope	Returns true if the country has a land force limit of at least as much regiments than the specified country.	Country	land_forcelimit = ROOT
land_maintenance	Float	Returns true if the country has set its land maintenance to X.	Country	land_maintenance = 0.90
land_morale	Float	Returns true if the country has a morale of armies of at least X.	Country	land_morale = 3.5
Tag, Scope	Returns true if the country has an at least as high morale of armies as the specified country.	Country	land_morale = PRU
last_mission	Identifier	Returns true if the last mission of the country was the specified mission.	Country	NOT = { last_mission = conquer_finland }
legitimacy	Integer	Returns true if the country has at least X legitimacy.	Country	legitimacy = 100
Tag, Scope	Returns true if the country has at least as much legitimacy as the specified country.	Country	legitimacy = ENG
legitimacy_equivalent	Integer	Returns true, if the country's legitimacy equivalent (legitmacy, republican tradition, devotion, horde unity, meritocracy etc.) is at least X.	Country	legitimacy_equivalent = 80
Tag, Scope	Returns true, if the country has at least as much legitimacy equivalent (legitmacy, republican tradition, devotion, horde unity, meritocracy etc.) as the specified country.	Country	legitimacy_equivalent = FRA
legitimacy_or_horde_unity	Integer	Returns true if the country has at least X legitimacy or horde unity.	Country	legitimacy_or_horde_unity = 90
Tag, Scope	Returns true if the country has at least as much legitimacy or horde unity as the specified country.	Country	legitimacy_or_horde_unity = ROOT
liberty_desire	Integer	Return true if the subject has a liberty desire of at least X.	Country (subject)	liberty_desire = 50
light_ship_fraction	Float	Returns true if the ratio of the light ship fraction to the navy size of the country is at least X.	Country	light_ship_fraction = 0.3
light_ships_in_province	Integer	Returns true if there are at least X light ships in the province.	Province	light_ships_in_province = 10
Tag, Scope	Returns true if there are light ships from the specified country in the province.	Province	light_ships_in_province = ROOT
likely_rebels	Identifier	Returns true if the province has the specified rebel faction as likely rebels.	Province	likely_rebels = revolutionary_rebels
local_autonomy	Integer	Returns true if the province has a local autonomy of at least X.	Province	local_autonomy = 50
local_autonomy_above_min	Float	Returns true, if the province's local autonomy is at least X above the local development's minimun value.	Province	local_autonomy_above_min = 10
luck	Boolean	Returns true if the country is a lucky nation. (AI controlled counties only.)	Country	luck = yes
march_of	Tag, Scope	Returns true if the country is a march under country X.	Country	march_of = PAP
manpower	Integer	Returns true if the country has at least \text{X}\cdot1000 available manpower.	Country	manpower = 22
manpower_percentage	Float	Returns true if the country has a manpower level of at least X%.	Country	manpower_percentage = 0.50
marriage_with	Tag, Scope	Returns true if the country has a royal marriage with X.	Country	marriage_with = ROOT
max_manpower	Integer	Returns true if the country has at least \text{X}\cdot1000 maximum manpower.	Country	max_manpower = 5
mercantilism	Float	Returns true if the country's mercantilism is at least X.	Country	mercantilism = 5
meritocracy	Integer	Returns true, if the country has a meritocracy value of at least X.	Country	meritocracy = 80
mil	Integer	Returns true if cthe ountry has a ruler with a military skill of at least X.	Country	mil = 6
Tag, Scope	Returns true if the country has a ruler with at least as high military skill as the ruler of the specified country.	Country	dip = HJO
militarised_society	Integer	Returns true if the country has a militarization of country of at least X.	Country	militarized_society = 20
mil_power	Integer	Returns true if the country has at least X military power.	Country	mil_power = 333
Tag, Scope	Returns true if the country has at least as much military power than the specified country.	Country	mil_power = MAM
mil_tech	Integer	Returns true if the country has an military technology of at least level X.	Country	mil_tech = 4
monthly_income	Integer	Returns true if the country has a monthly income of at least X.	Country	monthly_income = 5
Tag, Scope	Returns true if the country has an at least as high monthly income as the specified country.	Country	mil_power = MAM
months_of_ruling	Integer	Returns true if the country has a ruler that has ruled for at least X months.	Country	months_of_ruling = 12
months_since_defection	Integer	Returns true if the province defected within the last X months.	Province	months_since_defection = 12
military_strength	Clause	Returns true, if the country's military strength (army size & navy size combined) is at least the size of X times the military strength of the specified country	Country	
military_strength = {
	who = FROM
	value = 2.0
}
nationalism	Integer	Returns true if province has at least X years of separatism remaining.	Province	nationalism = 5
national_focus	Identifier	Returns true if country has set the national focus to X.	Country	national_focus = ADM
nation_designer_points	Identifier	Returns true if at least X points were used when creating the custom nation.	Country	nation_designer_points = 802
native_ferocity	Integer	Returns true if ferocity of natives in the province is at least X.	Province	native_ferocity = 3
native_hostileness	Integer	Returns true if hostileness of natives in the province is at least X.	Province	native_hostileness = 2
native_size	Integer	Returns true if size of natives in the province is at least X.	Province	native_size = 30
naval_forcelimit	Integer	Returns true if the country has a naval force limit of at least X.	Country	naval_forcelimit = 24
Tag, Scope	Returns true if the country has a naval force limit of at least as much ships than the specified country.	Country	naval_forcelimit = SWE
naval_maintenance	Float	Returns true if the country's naval maintenance slider is at least X fraction of maximum.	Country	naval_maintenance = 0.33
naval_morale	Float	Returns true if the country has a morale of navies of at least X.	Country	naval_morale = 2.5
Tag, Scope	Returns true if the country has an at least as high morale of navies as the specified country.	Country	naval_morale = GBR
navy_size	Integer	Returns true if the current scope has a navy of at least X ships.	Country	navy_size = 300
Tag, Scope	Returns true if the current scope has a navy at least as large as the specified country.	Country	navy_size = SPA
navy_size_percentage	Integer	Returns true if the ratio of the total navy size of the country to its naval force limit is at least X.	Country	navy_size_percentage = 0.50
naval_strength	Clause	Returns true, if the country's navy size is at least the size of X times the navy size of the specified country.	Country	
naval_strength = {
	who = ENG
	value = 0.5
}
navy_tradition	Integer	Returns true if the country has a navy tradition of at least X.	Country	navy_tradition = 95
Tag, Scope	Returns true if the country has an at least as high navy tradition as specified country.	Country	navy_tradition = GBR
normal_or_historical_nations	Boolean	Returns true if game is set to use normal or historical nations.	Anywhere	normal_or_historical_nations = yes
normal_province_values	Boolean	Returns true if game is set to use normal province values.	Anywhere	normal_province_values = yes
num_accepted_cultures	Integer	Returns true, if the country has at least X accepted cultures.	Country	num_accepted_cultures = 1
num_free_building_slots	Integer	Returns true if the province has at least X building slots remaining.	Province	num_free_building_slots = 1
num_of_active_blessings	Integer	Returns true if the country has enabled at least X blessings.	Country	num_of_active_blessings = 5
num_of_admirals	Integer	Returns true if the country has at least X admirals.	Country	num_of_admirals = 2
Tag, Scope	Returns true if the country has at least as much admirals than the specified country.	Country	num_of_admirals = SPA
num_of_admirals_with_traits	Integer	Returns true if the country has at least X admirals with traits.	Country	num_of_admirals_with_traits = 1
num_of_allies	Integer	Return true if the country has at least X allies.	Country	num_of_allies = 7
Tag, Scope	Returns true if the country has at least as much allies than the specified country.	Country	num_of_allies = ARA
num_of_artillery	Integer	Returns true if the country has at least X artillery regiments.	Country	num_of_artillery = 12
Tag, Scope	Returns true if the country has at least as much artillery regiments than the specified country.	Country	num_of_artillery = FRA
num_of_aspects	Integer	Returns true if the country has at least X church aspects.	Country	num_of_aspects = 2
Tag, Scope	Returns true if the country has at least as much church aspects than the specified country.	Country	num_of_aspects = SWE
num_of_banners	Integer	Returns true, if the country has at least X banner units.	Country	num_of_banners = 3
num_of_cardinals	Integer	Returns true if the country has at least X cardinals in the Holy See.	Country	num_of_cardinals = 3
Tag, Scope	Returns true if the country has at least as much cardinals than the specified country.	Country	num_of_cardinals = FRA
num_of_cavalry	Integer	Returns true if the country has at least X cavalry regiments.	Country	num_of_cavalry = 23
Tag, Scope	Returns true if the country has at least as much cavalry regiments than the specified country.	Country	num_of_cavalry = FRA
num_of_cities	Integer	Returns true if the country owns at least X cities.	Country	num_of_cities = 15
Tag, Scope	Returns true if the country owns at least as much cities than the specified country.	Country	num_of_cities = ROOT
num_of_coalition_members	Integer	Returns true if the country is in a coalition of at least X members.	Country	num_of_coalition_members = 6
num_of_colonies	Integer	Returns true if the country has at least X unfinished colonies.	Country	num_of_colonies = 2
num_of_colonists	Integer	Returns true if the country has at least X colonists.	Country	num_of_colonists = 2
num_of_conquistadors	Integer	Returns true if the country has at least X conquistadors.	Country	num_of_conquistadors = 2
Tag, Scope	Returns true if the country has at least as much conquistadors than the specified country.	Country	num_of_conquistadors = ROOT
num_of_continents	Integer	Returns true, if the country owns provinces on at least X continents. Only provinces owned by the country itself are taken into account, not provinces owned by subjects.	Country	num_of_continents = 3
num_of_cossacks	Integer	Returns true, if the country has at least X cossack units.	Country	num_of_cossacks = 3
num_of_custom_nations	Integer	Returns true if there are at least X custom nations in the game.	Country	num_of_custom_nations = 1
num_of_diplomatic_relations	Integer	Returns true if the country has at least X diplomatic relations.	Country	num_of_diplomatic_relations = 3
num_of_diplomats	Integer	Returns true if the country has at least X diplomats.	Country	num_of_diplomats = 2
num_of_electors	Integer	Returns true if there are at least X electors of the HRE.	Anywhere	num_of_electors = 7
num_of_explorers	Integer	Returns true if the country has at least X explorers.	Country	num_of_explorers = 1
Tag, Scope	Returns true if the country has at least as much explorers than the specified country.	Country	num_of_explorers = ENG
num_of_free_diplomatic_relations	Integer	Returns true if the country has at least X free diplomatic relations slots.	Country	num_of_free_diplomatic_relations = 1
num_of_galley	Integer	Returns true if the country has at least X galleys.	Country	num_of_galley = 20
Tag, Scope	Returns true if the country has at least as much galleys than the specified country.	Country	num_of_galley = VEN
num_of_generals	Integer	Returns true if the country has at least X generals.	Country	num_of_generals = 2
Tag, Scope	Returns true if the country has at least as much generals than the specified country.	Country	num_of_generals = FROM
num_of_generals_with_traits	Integer	Returns true if the country has at least X generals with traits.	Country	num_of_generals_with_traits = 1
num_of_harmonized	Integer	Returns true, if the country has harmonized with at least X religions or religion groups.	Country	num_of_harmonized = 2
num_of_heavy_ship	Integer	Returns true if the country has at least X heavy ships.	Country	num_of_heavy_ship = 20
Tag, Scope	Returns true if the country has at least as much heavy ships than the specified country.	Country	num_of_heavy_ship = ENG
num_of_infantry	Integer	Returns true if the country has at least X infantry regiments.	Country	num_of_infantry = 300
Tag, Scope	Returns true if the country has at least as much infantry regiments than the specified country.	Country	num_of_infantry = FROM
num_of_light_ship	Integer	Returns true if the country has at least X light ships.	Country	num_of_light_ship = 20
Tag, Scope	Returns true if the country has at least as much light ships than the specified country.	Country	num_of_light_ship = GEN
num_of_loans	Integer	Returns true if the country has at least X loans.	Country	num_of_loans = 15
Tag, Scope	Returns true if the country has taken at least as much loans than the specified country.	Country	num_of_loans = LIT
num_of_marches	Integer	Returns true if the country has at least X marches.	Country	num_of_marches = 2
Tag, Scope	Returns true if the country has at least as much marches than the specified country.	Country	num_of_marches = POL
num_of_mercenaries	Integer	Returns true if the country has at least X mercenaries.	Country	num_of_mercenaries = 10
Tag, Scope	Returns true if the country has at least as much mercenaries than the specified country.	Country	num_of_mercenaries = TUR
num_of_merchants	Integer	Returns true if the country has at least X merchants.	Country	num_of_merchants = 3
num_of_missionaries	Integer	Returns true if the country has at least X missionaries.	Country	num_of_missionaries = 2
num_of_owned_and_controlled_institutions	Integer	Returns true, if the country owns and controlls at least X provinces that are institution origins.	Country	num_of_owned_and_controlled_institutions = 2
num_of_owned_provinces_with	Clause	Returns true if at least X provinces of the scoped country match the specified condition(s).	Country	
num_of_owned_provinces_with = {
	value = 15
	has_owner_accepted_culture = no
	NOT = { culture = root }
	is_overseas = no
}
num_of_ports	Integer	Returns true if country owns at least X home ports (in lands contiguously connected to the capital).	Country	num_of_ports = 20
Tag, Scope	Returns true if the country has at least as much home ports than the specified country.	Country	num_of_ports = MNG
num_of_ports_blockading	Integer	Returns true if the country blockades at least X ports.	Country	num_of_ports_blockading = 10
num_of_powerful_estates	Integer	Returns true if the country has at least X estates with at least 70 influence.	Country	num_of_powerful_estates = 2
num_of_protectorates	Integer	Returns true if the country has at least X protectorates.	Country	num_of_protectorates = 2
Tag, Scope	Returns true if the country has at least as much protectorates than the specified country.	Country	num_of_protectorates = POR
num_of_provinces_in_states	Integer	Returns true if the country has at least X provinces is states.	Country	num_of_provinces_in_states = 14
num_of_provinces_in_territories	Integer	Returns true if the country has at least X provinces is territories.	Country	num_of_provinces_in_territories = 12
num_of_rebel_armies	Integer	Returns true if the number of rebel armies in the country is at least X.	Country	num_of_rebel_armies = 3
Tag, Scope	Returns true if there are at least as much rebel armies in the country than the specified country.	Country	num_of_rebel_armies = SWI
num_of_rebel_controlled_provinces	Integer	Returns true if the number of rebel controlled provinces in the country is at least X.	Country	num_of_rebel_controlled_provinces = 3
Tag, Scope	Returns true if the country has at least as much rebel controlled provinces than the specified country.	Country	num_of_rebel_controlled_provinces = TIM
num_of_religion	Clause	Float value: Returns true if the ratio of the provinces with the specified religion to the total provinces of the country is at least X.
Integer value: Returns true if the country has at least X provinces with the specified religion.
It is also possible to specify the secondary religion by secondary = yes.	Country	
num_of_religion = {
	religion = animism
	value = 0.3
}
num_of_revolts	Integer	Returns true if the number of revolts in the country is at least X.
The same as ‘num_of_rebel_controlled_provinces’.	Country	num_of_revolts = 3
Tag, Scope	Returns true if the country has at least as much rebel controlled provinces than the specified country.	Country	num_of_revolts = TIM
num_of_royal_marriages	Integer	Returns true if the country has at least X royal marriages.	Country	num_of_royal_marriages = 2
Tag, Scope	Returns true if the country has at least as much royal marriages than the specified country.	Country	num_of_royal_marriages = ENG
num_of_states	Integer	Returns true if the country has at least X states.	Country	num_of_states = 8
num_of_streltsy	Integer	Returns true, if the country has at least X streltsy units.	Country	num_of_streltsy = 3
num_of_strong_trade_companies	Integer	Returns true if the country has at least X strong trade companies.	Country	num_of_strong_trade_companies = 4
num_of_subjects	Integer	Returns true if the country is the overlord of at least X subject countries of any type.	Country	num_of_subjects = 1
num_of_territories	Integer	Returns true, if the country has at least X territories (areas that aren't states).	Country	num_of_territories = 10
num_of_times_improved	Integer	Returns true if the development of the province was improved at least X times.	Province	num_of_times_improved = 5
num_of_total_ports	Integer	Returns true if the country owns at least X total ports (anywhere in the world).	Country	num_of_total_ports = 20
Tag, Scope	Returns true if the country owns at least as much total ports than the specified country.	Country	num_of_total_ports = JAP
num_of_trade_embargos	Integer	Returns true if the country has at least X trade embargos.	Country	num_of_trade_embargos = 3
num_of_trading_bonuses	Integer	Returns true if the country hasat least X ‘trading in’ bonuses.	Country	num_of_trading_bonuses = 7
num_of_transport	Integer	Returns true if the country has at least X transports.	Country	num_of_transport = 24
Tag, Scope	Returns true if the country has at least as much transports than the specified country.	Country	num_of_transport = DEN
num_of_trusted_allies	Integer	Returns true if the country has at least X allies with 100 trust.	Country	num_of_trusted_allies = 3
num_of_unions	Integer	Returns true if the country has at least X personal unions.	Country	num_of_unions = 3
Tag, Scope	Returns true if the country has at least as much personal unions than the specified country. Note: this no longer works. personal_union = x is the new format, eg personal_union = 2.	Country	num_of_unions = BUR
num_of_units_in_province	Clause	Returns true if the specified country has at least X units of the specified type in the province. (type and who are not needed, if not included will default to all.)	Province	
num_of_units_in_province = {
    who =
    type =
    amount =
}
num_of_unlocked_cults	Integer	Returns true if the country has unlocked at least X cults.	Country	num_of_unlocked_cults = 13
num_of_vassals	Integer	Returns true if the country has at least X vassals.	Country	num_of_vassals = 3
Tag, Scope	Returns true if the country has at least as much vassals than the specified country.	Country	num_of_vassals = POL
num_of_war_reparations	Integer	Returns true if the country receives war reparations from at least X countries.	Country	num_of_war_reparations = 4
Tag, Scope	Returns true if the country receives war reparations from at least as much countries than the specified country.	Country	num_of_war_reparations = ROOT
num_ships_privateering	Integer	Returns true if country has at least X ships privateering.	Country	num_ships_privateering = 20
Tag, Scope	Returns true if the country has at least as much ships privateering than the specified country.	Country	num_ships_privateering = HSA
offensive_war_with	Tag, Scope	Returns true if the country is in an offensive war with country X.	Country	offensive_war_with = ROOT
overextension_percentage	Float	Returns true if country has at least X% overextension.	Country	overextension_percentage = 0.75
overlord_of	Tag, Scope	Returns true if the country is the overlord of X.	Country	overlord_of = FRA
overseas_provinces_percentage	Float	Returns true if the country has X percentage of overseas provinces.	Country	overseas_provinces_percentage = 0.05
owned_by	Tag, Scope	Returns true if the province is owned by the country X.	Province	owned_by = TUR
owns	Province ID	Returns true if the country owns the specified province.	Country	owns = 236
owns_core_province	Province ID	Returns true if the country owns and has a core on the specified province.	Country	owns_core_province = 217
owns_or_non_sovereign_subject_of	Province ID, Scope	Returns true, if the country or a subject that is not categorized as "sovereign" (e.g. tributary states are excluded) owns the specified province.	Country	owns_or_non_sovereign_subject_of = 151
owns_or_subject_of	Province ID, Scope	Returns true, if the country or a subject owns the specified province.	Country	owns_or_subject_of = 151
papacy_active	Boolean	Returns true if the papacy is active.	Anywhere	papacy_active = yes
papal_influence	Integer	Returns true if the country's papal influence is at least X.	Country	papal_influence = 100
Tag, Scope	Returns true if the country has at least as much papal influence as the specified country.	Country	papal_influence = KID
patriarch_authority	Float	Returns true if the country's patriarch authority is at least X.	Country	patriarch_authority = 0.75
percentage_backing_issue	Float	Returns true if at least the Xth part of the seats in the parliament is backing for the current issue.	Country	percentage_backing_issue = 0.5
personality	Identifier	Returns true if the country has a ruler which personality is X.	Country	personality = ai_militarist
piety	Float	Returns true if the country's piety is at least X.	Country	piety = -0.75
Tag, Scope	Returns true if the country has at least as much piety as the specified country.	Country	piety = MOR
preferred_emperor	Tag, Scope	Returns true if an elector has the country X is the preferred emperor.	Country (Elector)	preferred_emperor = HAB
prestige	Integer	Return true if the country has a prestige of at least X.	Country	prestige = 99
Tag, Scope	Returns true if the country has at least as much prestige as the specified country.	Country	prestige = ADA
previous_owner	Tag, Scope	Returns true if the previous owner of the province was X.	Province	previous_owner = HUN
primary_culture	Identifier, Scope	Returns true if the country's primary culture is X.	Country	primary_culture = dutch
primitives	Boolean	Returns true if the country is primitive.	Country	primitives = yes
privateer_power	Clause	Returns true if the country has at least X trade power from privateering in the trade node.	Province
(Trade node)	
1744 = { #Antwerpen
	privateer_power = {
		country = FROM
		share = 25
	}
}
production_efficiency	Float	Returns true if the country has a production efficiency of at least X.	Country	production_efficiency = 0.10
Tag, Scope	Returns true if the country has an at least as high production efficiency as the specified country.	Country	production_efficiency = AAC
production_income_percentage	Float	Returns true if the ratio of production income to total income is at least X.	Country	production_income_percentage = 0.10
production_leader	Clause	Returns true if the country is the production leader of the trade good X.	Country	
production_leader = {
	trade_goods = coffee
}
province_distance	Clause	Returns true, if the distance between specified provinces is at least X.	Province	
any_owned_province = {
	province_distance = {
		who = 151
		distance = 50
	}
}
province_id	Integer,Scope	Returns true if the province has the ID X.	Province	province_id = 1
province_group	Identifier	Returns true if the province belongs to the specified province group.	Province	province_group = my_province_group
province_trade_power	Integer	Returns true if trade power generated by the province is at least X.	Province	province_trade_power = 5
provinces_on_capital_continent_of	Scope	Returns true if the country has a province on the continent with the capital of the specified country.	Country	provinces_on_capital_continent_of = ROOT
pure_unrest	Integer	Returns true if the province has a base unrest of at least X.	Province	pure_unrest = 2
range	Tag, Scope	Returns true if the province is within the range of the specified country.	Province	range = TUR
real_day_of_year	Integer	Returns true, if today is X. Refers to the actual real day (probably takes system time).	Anywhere	[example needed]
real_month_of_year	Integer	Returns true if the month of the year in reality is at least X (January ≙ 0)	Anywhere	real_month_of_year = 6 # Mai
reform_desire	Float	Returns true if the reform desire is at least X%.	Anywhere	reform_desire = 0.95
region	Identifier	Returns true if the province is part of the region X.	Province	region = west_india_region
religion	Identifier, Scope	Returns true if the country/province has religion X.
Note: Within province scope religion = secondary returns true if the province religion matches the secondary/syncretic religion of the owner.	Country
Province	religion = catholic
religion_group	Identifier, Scope	Returns true if the country/province has a religion of the specified religious group.	Country
province	religion_group = christian
religion_group_claim	Identifier	Returns true if the country has the same religion as country X	Region	religion_group_claim = FROM
religion_years	Clause	Returns true if the specified religion is enabled for at least X years.	Anywhere	religion_years = { confucianism = 100 }
religious_school	Clause	Returns true, if the country has the specified religious school.	Country	
religious_school = {
	group = muslim
	school = hanbali_school
}
religious_unity	Float	Returns true if the country's religious unity is at least X.	Country	religious_unity = 0.99
republican_tradition	Integer	Returns true if country's republican tradition is at least X.	Country	republican_tradition = 90
revanchism	Integer	Returns true if country's revanchism is at least X.	Country	revanchism = 10
reverse_has_opinion	Clause	Returns true if the country specified by who has at least value opinion of the country.	Country	
reverse_has_opinion = {
	who = DAN
	value = 80
}
reverse_has_opinion_modifier	Clause	Returns true if the country specified by who has the opinion modifier modifier towards the country.
Can also specify a value of the modifier (but it is not displayed).	Country	
reverse_has_opinion_modifier = {
	who = ROOT
	modifier = opinion_spurned_pu
}
revolt_percentage	Float	Returns true if at least the Xth part of the provinces of the country have revolts.	Country	revolt_percentage = 0.1
revolution_target_exists	Boolean	Returns true if there is a revolutionary target in the world.		revolution_target_exists = yes
ruler_age	Integer	Returns true if the country has a ruler that is at least X years old.	Country	ruler_age = 40
ruler_consort_marriage_length	Integer	[needs description]	Country	ruler_consort_marriage_length = 10
ruler_culture	Identifier, Scope	Returns true, if the country's ruler has the specified culture. Can utilise Event Scope Values.	Country	ruler_culture = prussian
ruler_has_personality	Identifier	Returns true if the country’s ruler has the specified personality.	Country	ruler_has_personality = malevolent_personality
ruler_is_foreigner	Boolean	Returns true if the country has foreign ruler.	Country	ruler_is_foreigner = no
ruler_religion	Identifier, Scope	Returns true, if the country's ruler has the specified religion. Can utilise Event Scope Values.	Country	ruler_religion = catholic
sailors	Integer	Returns true if the country has at least X sailors.	Country	sailors = 2500
sailors_percentage	Float	Returns true if the country has a sailor level of at least X%.	Country	sailors_percentage = 0.50
same_continent	CAPITAL, Province Scope	Returns true, if specified provinces are on the same continent. If used in country scope, capitals are checked.	Country, Province	
FRA = {
	same_continent = ROOT
}
any_owned_province = {
	same_continent = CAPITAL
}
secondary_religion	Identifier	Returns true the secondary religion of the country is X.	Country	secondary_religion = ibadi
senior_union_with	Tag, Scope	Returns true if the country is the senior partner in a personal union over country X.	Country	senior_union_with = HAB
sieged_by	Tag, Scopes	Returns true if the province is being besieged by country X.	Province	sieged_by = ROOT
splendor	Integer	Returns true, if the country has at least X splendor.	Country	splendor = 800
stability	Integer	Returns true if the country has a stability of at least X.	Country	stability = 1
Tag, Scope	Returns true if the country has at least as much stability than the specified country.	Country	stability = HAB
start_date	Date	Returns true if the start date of the campaign is X.	Anywhere	start_date = 1776.7.4
started_in	Date	Returns true if the start date of the campaign is X or after.	Anywhere	started_in = 1776.7.4
statists_vs_orangists	Float	Returns true if Statists vs Orangists is at least X.	Country	statists_vs_orangists = 0.9
subsidised_percent_amount	Float	Returns true if the country receives subsidies of at least X% of its monthly income.	Country	subsidised_percent_amount = 0.5
succession_claim	Tag, Scope	Returns true if the country has claimed the throne of the country X.	Country	succession_claim = FROM
superregion	Identifier	Returns true if the province belongs to the superregion X.	Province	superregion = east_indies_superregion
tag	Tag, Scope	Returns true if the country is the specified country.	Country	tag = HAB
tariff_value	Float	Returns true if the colonial nation pays at least X% tariffs.	Country	tariff_value = 0.25
tax_income_percentage	Float	Returns true if the ratio of tax income to total income is at least X.	Country	tax_income_percentage = 0.2
tech_difference	Integer	Returns true if the scoped country is at least X technologies ahead (compared to the country).	Country	
any_neighbor_country = {
	tech_difference = 3
} 
technology_group	Identifier	Returns true if the country has the technology group X.	Country	technology_group = western
Scope	Returns true if the countries have the same technology group.	Country	technology_group = PREV
tolerance_to_this	Integer	Returns true if the country has a tolerance of at least X towards the religion of the country or scoped province.	Country Province	tolerance_to_this = 0
total_base_tax	Integer	Returns true if the base tax of the country's provinces totals at least X.	Country	total_base_tax = 75
Tag, Scope	Returns true if the country has at least as much total base tax as the specified country.	Country	total_base_tax = MNG
total_development	Integer	Returns true if the country has a total development of at least X.	Country	total_development = 200
total_number_of_cardinals	Integer	Returns true if the total number of cardinals is at least X.	Anywhere	total_number_of_cardinals = 49
trade_league_embargoed_by	Tag, Scope	[description needed]	Country	trade_league_embargoed_by = FROM
transports_in_province	Integer	Returns true if there are at least X transports in the province.	Province	transports_in_province = 10
Tag, Scope	Returns true if there are transports from the specified country in the province.	Province	transports_in_province = TER
trade_company_size	Integer	Returns true if the trade company has at least X provinces.	Province	trade_company_size = 5
trade_efficiency	Float	Returns true if the country has a trade efficiency over X.	Country	trade_efficiency = 0.50
trade_embargoing	Tag, Scope	Returns true if the country is embargoing country X.	Country	trade_embargoing = HAB
trade_embargo_by	Tag, Scope	Returns true if country X is embargoing the country.	Country	trade_embargo_by = HAB
trade_goods	Identifier	Returns true if the province is producing the trade good X.	Province	trade_goods = fur
trade_income_percentage	Float	Returns true if the ratio of trade income to total income is at least X.	Country	trade_income_percentage = 0.10
trade_range	Tag, Scope	Returns true if the trade node is within the trade range of the specified country.	Province
(Trade node)	trade_range = ENG
trade_share	Clause	Returns true if the country controls at least X% of the trade in the specified trade node.	Province
(Trade node)	
1744 = { #Antwerpen
	trade_share = {
		country = NED
		share = 25
	}
}
trading_bonus	Clause	Returns true if the country has the ‘trading in’ bonus of the specified trade good.	Country	
trading_bonus = {
	trade_goods = coffee
	value = yes
}
trading_part	Clause	Returns true if the country has access to X% of the world market of the specified trade good.	Country	
trading_part = {
	trade_goods = cocoa
	value = 0.05
}
trading_policy_in_node	Clause	Returns true, if the country has the specified trading policy in the specified trade node. Can also use "policy = any".	Country	
any_active_trade_node = {
	ROOT = {
		trading_policy_in_node = {
			node = PREV
			policy = propagate_religion
		}
	}
}
transport_fraction	Float	Returns true if the ratio of the transport fraction to the navy size of the country is at least X.	Country	transport_fraction = 0.55
treasury	Integer	Returns true if country's treasury contains at least X ducats.	Country	treasury = 100
Tag, Scope	Returns true if the country has at least as much ducats in its treasury as the specified country.	Country	treasury = ROOT
tribal_allegiance	Integer	Returns true, if the country has a tribal allegiance of at least X.	Country	tribal_allegiance = 10
truce_with	Tag, Scope	Returns true if the country has a truce with X.	Country	truce_with = FRA
unit_has_leader	yes	Returns true if any unit is in the province has a leader.
Warning: Works only with 'yes'.	Province	unit_has_leader = yes
unit_in_battle	Boolean	Returns true if any unit in the province is in a battle.	Province	unit_in_battle = no
unit_in_siege	Boolean	Returns true if any unit in the province is in a siege.	Province	unit_in_siege = yes
units_in_province	Integer	Returns true if there are at least X units in the province.	Province	units_in_province = 1
Tag, Scope	Returns true if the specified country has units in the province.	Province	units_in_province = RUS
unit_type	Identifier	Returns true if the country has units of type X.	Country	unit_type = sub_saharan
unrest	Integer	Returns true if the unrest in the province is at least X.	Province	unrest = 3
uses_authority	Boolean	Returns true if the country uses authority mechanics.	Country	uses_authority = yes
uses_church_aspects	Boolean	Returns true if the country uses church aspects mechanics.	Country	uses_church_aspects = yes
uses_blessings	Boolean	Returns true if the country uses blessings mechanics.	Country	uses_blessings = yes
uses_cults	Boolean	Returns true if the country uses cults mechanics.	Country	uses_cults = yes
uses_devotion	Boolean	Returns true, if the country uses devotion instead of legitimacy.	Country	uses_devotion = yes
uses_doom	Boolean	Returns true if the country uses doom mechanics.	Country	uses_doom = yes
uses_fervor	Boolean	Returns true if the country uses fervor mechanics.	Country	uses_fervor = yes
uses_isolationism	Boolean	Returns true, if the country uses the isolationism mechanic.	Country	uses_isolationism = yes
uses_karma	Boolean	Returns true if the country uses karma mechanics.	Country	uses_karma = yes
uses_papacy	Boolean	Returns true if the country uses papacy mechanics.	Country	uses_papacy = yes
uses_patriarch_authority	Boolean	Returns true if the country uses patriarch authority mechanics.	Country	uses_patriarch_authority = yes
uses_personal_deities	Boolean	Returns true if the country uses personal deities mechanics.	Country	uses_personal_deities = yes
uses_piety	Boolean	Returns true if the country uses piety mechanics.	Country	uses_piety = yes
uses_religious_icons	Boolean	Returns true, if the country uses religious icons.	Country	uses_religious_icons = yes
uses_syncretic_faiths	Boolean	Returns true if the country uses syncretic faiths mechanics.	Country	uses_syncretic_faiths = yes
variable_arithmetic_trigger	Clause	Can use variable effects and triggers to compare or change and compare modifier and trigger values. "variable_arithmetic_trigger" sections can include more "variable_arithmetic_trigger" sections. This has to be done for effects such as "change_variable" or effects of "if" sections inside the "variable_arithmetic_trigger", since the game may crash otherwise.	Anywhere	
variable_arithmetic_trigger = {
	custom_tooltip = from_total_development_is_10_times_bigger_than_ours
	export_to_variable = {
		which = our_total_development
		value = trigger_value:total_development
	}
	export_to_variable = {
		which = from_total_development
		value = trigger_value:total_development
		who = FROM
	}
	multiply_variable = { which = from_total_development value = 10 }
	
	check_variable = { which = from_total_development which = our_total_development }
}
vassal_of	Tag, Scope	Returns true if the country is a vassal of country X.	Country	vassal_of = ROOT
war_exhaustion	Integer	Returns true if the country has a war exhaustion of at least X.	Country	war_exhaustion = 8
Tag, Scope	Returns true if the country has at least as much war exhaustion as the specified country.	Country	war_exhaustion = NPL
war_score	Integer	Returns true if the coutry has a warscore of at least X%.	Country	war_score = 100
war_score_against	Clause	Returns true if the coutry has a warscore of at least X against the specified country.	Country	
war_score_against = {
	who = INC
	value = 75
}
war_with	Tag, Scope	Returns true if the country is at war with country X.	Country	war_with = INC
was_never_end_game_tag_trigger	Boolean	Returns false if the country was ever an end game tag i.e. a tag that is not intended to form another nation	Country	was_never_end_game_tag_trigger = yes
was_player	Boolean	Returns true if the country was controlled by a human player.	Country	was_player = no
will_back_next_reform	Boolean	Returns true if the member of the HRE is backing the next imperial reform.	Country	will_back_next_reform = yes
yearly_corruption_increase	Float	Returns true if the country has a yearly corruption increase of at least X.	Country	NOT = { yearly_corruption_increase = 0.001 }
years_in_union_under	Clause	Returns true if the country is in a personal union under the specified country for at least X years.	Country	
years_in_union_under = {
	who = ROOT
	years = 50
}
years_in_vassalage_under	Clause	Returns true if the country is a vassal of the specified country for at least X years.	Country	
years_in_vassalage_under = {
	who = ROOT
	years = 10
}
years_of_income	Float	Returns true if the country's treasury contains ducats of at least X times their yearly income.	Country	years_of_income = 1.0
Tag, Scope	Returns true if the country's treasury contains ducats of at least the yearly income of the specified country.	Country	years_of_income = SER