
alias[trigger:<scripted_trigger>] = bool


##country scope
###Returns true if the country has hired an advisor of the specified type which has at least level X.
alias[trigger:<advisor_type>] = int[1..3]

##country scope
###Returns true if the country has at least X buildings from the specified building type.
alias[trigger:<building>] = int

##country scope
###Returns true if the country has at least X ideas from the specified idea group.
alias[trigger:<idea_group>] = int[1..8]

##country scope
###Returns true if the support for the specified institution in the province is at least X.
alias[trigger:<institution>] = int[0..100]

##country scope
###Returns true if the country has a tolerance of at least X of the specified religion. Note: No correct localisation.
alias[trigger:<religion>] = int

##country scope
###Returns true if the country has at least X provinces producing the specified trade good.
alias[trigger:<trade_good>] = int

##country scope
###Returns true if the country has at least X absolutism.
alias[trigger:absolutism] = int[0..100]

##country scope
###Returns true if the country accepts the specified culture.
alias[trigger:accepted_culture] = <culture> #todo
alias[trigger:accepted_culture] = scope[province]

##country scope
###Returns true if X is the current mission of the country.
alias[trigger:active_major_mission] = <mission> #todo

##country scope
###Returns true if the country has a ruler with an administrative skill of at least X.
alias[trigger:adm] = int[0..6]

##country scope
###Returns true if the country has at least X administrative power, or at least as much as the specified country.
alias[trigger:adm_power] = int
alias[trigger:adm_power] = scope[country]
alias[trigger:adm_power] = <country_tag> #todo

##country scope
###Returns true if the country has an administrative technology of at least X.
alias[trigger:adm_tech] = int[0..200]

##country scope
###Returns true if the country has an advisor of the specified type.
alias[trigger:advisor] = <advisor_type> #todo

##country scope
###Returns true if the advisor X exists.
alias[trigger:advisor_exists] = <advisor_id> #todo

##country scope
###Returns true if the country is controlled by the AI.
alias[trigger:ai] = bool

##country scope
###Returns true if the country has the specified attitude towards country X.
alias[trigger:ai_attitude] = {
	who = scope[country]
	who = <country_tag>
	attitude = <attitude>
}

##country scope
###Returns true if the country has an alliance with X.
alias[trigger:alliance_with] = scope[country]
alias[trigger:alliance_with] = <country_tag> #todo

##anywhere
###Returns true if females can become emperor.
alias[trigger:allows_female_emperor] = bool

##anywhere
###Returns true under all circumstances if set to yes, returns false under all circumstances if set to no.	
alias[trigger:always] = bool

##province scope
###Returns true if the province is part of the area X.
alias[trigger:area] = <area>

##country scope
###Returns true if the country has an army of at least X k soldiers, or at least as many soldiers as the specified country.
alias[trigger:army_size] = int
alias[trigger:army_size] = scope[country]
alias[trigger:army_size] = <country_tag>

##country scope
###Returns true if the total army size of the country is at least X% of its land force limit.
alias[trigger:army_size_percentage] = float

##country scope
###Returns true if the country's army size is at least the size of X times the army size of the specified country.
alias[trigger:army_strength] = {
	who = scope[country]
	who = <country_tag>
	value = float
}

##country scope
###Returns true if the country has an army tradition of at least X, or at least as high as the specified country.
alias[trigger:army_tradition] = int[0..100]
alias[trigger:army_tradition] = scope[country]
alias[trigger:army_tradition] = <country_tag>

##country scope
###Returns true if the ratio of the artillery fraction to the army size of the country is at least X.
alias[trigger:artillery_fraction] = float[0.0..1.0]

##province scope
###Returns true if there are at least X artillery units in the province, or if there are artillery units from the specified country in the province.
alias[trigger:artillery_in_province] = int
alias[trigger:artillery_in_province] = scope[country]
alias[trigger:artillery_in_province] = <country_tag>

##country scope
###Returns true if the country is at war with any country of a different religion.
alias[trigger:at_war_with_religious_enemy] = bool

##country scope
###Returns true if the country has at least X authority, or if the country has at least as much authority as the specified country.
alias[trigger:authority] = int[0..100] #todo: What is authority? If it is imperial authority, it can be 0-100, but how can it be more for one country than for another?
alias[trigger:authority] = scope[country]
alias[trigger:authority] = <country_tag>

##country scope
###Returns true if the country has an average autonomy in its provinces of at least X.
alias[trigger:average_autonomy] = int[0..100]

##country scope
###TODO: Needs description
alias[trigger:average_autonomy_above_min] = int[0..100]

##country scope
###TODO: Needs description
alias[trigger:average_effective_unrest] = int[0..100]

##country scope
###Returns true if the country has an average autonomy in its provinces excluding overseas provinces is at least X.
alias[trigger:average_home_autonomy] = int[0..100]

##country scope
###Returns true if the country has an average unrest in its provinces of at least X.
alias[trigger:average_unrest] = int[0..100]

##province scope
###Returns true if the base manpower of the province is at least X.
alias[trigger:base_manpower] = int[0..100]

##province scope
###Returns true if the base production of the province is at least X.
alias[trigger:base_production] = int[0..100]

##province scope
###Returns true if the base tax of the province is at least X.
alias[trigger:base_tax] = int[0..100]

##country scope
###Returns true if the blockade penalty of the country is at least X%.
alias[trigger:blockade] = int[0..100]

##country scope
###Returns true if distance between the borders of the countries is at least X.
alias[trigger:border_distance] = {
	who = scope[country]
	who = <country_tag>
	distance = int
}

##anywhere
###Returns true if at least amount number of targets within the specified scope match the specified conditions
alias[trigger:calc_true_if] = { #todo: find out what all can go in this
	all_country = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	amount = int
}

##country scope
###Returns true if country meets the conditions defined in the subject type's is_potential_overlord section.
alias[trigger:can_be_overlord] = <subject_type> #todo

##province scope
###Returns true if the specified building can be built in the province.
alias[trigger:can_build] = <building> #todo

##country scope
###Returns true if the country can create a vassal. Warning: Interprets anything after ‘=’ as “yes”. Note: Works only for independent countries.
alias[trigger:can_create_vassals] = yes #deliberate

##country scope
###Returns true if the country’s heir can potentially be the consort’s child.
alias[trigger:can_heir_be_child_of_consort] = bool

##country scope
###Returns true if the country can justify a trade conflict against country X.
alias[trigger:can_justify_trade_conflict] = scope[country]
alias[trigger:can_justify_trade_conflict] = <country_tag>

##province scope
###Returns true if the specified rebel faction is a valid rebel faction of the province.
alias[trigger:can_spawn_rebels] = <rebel_type> #todo

##country scope
###Returns true if the country's capital is the province with the ID X.
alias[trigger:capital] = <province_id> #todo

##country scope
###Returns true if distance between the capitals of the countries is at least X.
alias[trigger:capital_distance] = {
	who = scope[country]
	who = <country_tag>
	distance = int
}

##region scope
###Returns true if trade node capital is X.
alias[trigger:capital_trade_node] = <province_id>

##country scope
###Returns true if the ratio of the cavalry fraction to the army size of the country is at least X.
alias[trigger:cavalry_fraction] = float[0.0..1.0]

##province scope
###Returns true if there are at least X cavalry units in the province, or if there are cavalry units from the specified country in the province.
alias[trigger:cavalry_in_province] = int
alias[trigger:cavalry_in_province] = scope[country]
alias[trigger:cavalry_in_province] = <country_tag>

##country scope
###Returns true if the specified variable is at least X.
alias[trigger:check_variable] = {
	which = scalar
	value = int
}

## scope = Country
###Returns true if the country has at least X church power, or at least as much as the specified country.
alias[trigger:church_power] = int[0..100]
alias[trigger:church_power] = scope[country]
alias[trigger:church_power] = <country_tag>

## scope = Country
###Returns true if the country is the target of a coalition.
alias[trigger:coalition_target] = scope[country]
alias[trigger:coalition_target] = <country_tag>

## scope = [scope needed]
###Returns true if ... has gotten a colonial grant for the scope's colonial region from any potential pope-like entities.
alias[trigger:colonial_claim_by_anyone_of_religion] = <religion> #todo: how does this work?

## scope = Province
###Returns true if the province is part of the colonial region X.
alias[trigger:colonial_region] = <colonial_region> #todo

## scope = Country
###Returns true if country has claim on colony
alias[trigger:colony_claim] = scope[country]
alias[trigger:colony_claim] = <country_tag>

## scope = Province
###Returns true if colony is at least size X.
alias[trigger:colonysize] = int

## scope = Country
###Returns true if the country has a consort with an administrative skill of at least X.
alias[trigger:consort_adm] = int[0..6]

## scope = Country
###Returns true if the country's consort has an age of at least X.
alias[trigger:consort_age] = int

## scope = Country
###Returns true if the country has a consort with an diplomatic skill of at least X.
alias[trigger:consort_dip] = int[0..6]

## scope = Country
###Returns true if the country's consort has the specified culture. Can utilise Event Scope Values.
alias[trigger:consort_culture] = <culture>
alias[trigger:consort_culture] = scope[country] #todo: I assume province works here (and elsewhere) too
alias[trigger:consort_culture] = <country_type>

## scope = Country
###Returns true if the country's consort has the specified personality.
alias[trigger:consort_has_personality] = <personality>

## scope = Country
###Returns true if the country has a consort with an military skill of at least X.
alias[trigger:consort_mil] = int[0..6]

## scope = Country
###Returns true if the country's consort has the specified religion. Can utilise Event Scope Values.
alias[trigger:consort_religion] = <religion>
alias[trigger:consort_religion] = scope[country] #todo: I assume province works here (and elsewhere) too
alias[trigger:consort_religion] = <country_type>

## scope = Province
###Returns true if the construction progress is at least X%.
alias[trigger:construction_progress] = float[0.0..1.0]

## scope = Province
###Returns true if the province is located on continent X.
alias[trigger:continent] = <continent>

## scope = Province
###Returns true if the province is controlled by X.
alias[trigger:controlled_by] = scope[country]
alias[trigger:controlled_by] = <country_tag>

## scope = Country
###Returns true if the province with id X is controlled by the country.
alias[trigger:controls] = <province_id>

## scope = Country
###Returns true if the country has a core on any province owned by country X.
alias[trigger:core_claim] = scope[country]
alias[trigger:core_claim] = <country_tag>

## scope = Country
###Returns true if the country has cored at least X% of its provinces.
alias[trigger:core_percentage] = float[0.0..1.0]

## scope = Country
###Returns true if the country has a corruption of at least X.
alias[trigger:corruption] = float

## scope = Province
###Returns true if the province is part of the specified country or its subjects.
alias[trigger:country_or_vassal_holds] = scope[country]
alias[trigger:country_or_vassal_holds] = <country_tag>

## scope = Province
###Returns true if the province culture is X.
alias[trigger:culture] = <culture>

## scope = Country, Province
###Returns true if the country/province has a culture of the specified culture group.
alias[trigger:culture_group] = <culture_group>

## scope = Country
###Returns true if country's primary culture is the same culture group as any province owned by country X.
alias[trigger:culture_group_claim] = scope[country]
alias[trigger:culture_group_claim] = <country_tag>

## scope = Anywhere
###Returns true if the current age is X.
alias[trigger:current_age] = <game_age> #todo

## scope = Country
###Returns true if the parliament of the country debates about X.
alias[trigger:current_debate] = <parliamentary_debate> #todo

## scope = Country
###Returns true if the country has the specified (orthodox) icon.
alias[trigger:current_icon] = enum[orthodox_icons]

## scope = Country, Province
###Returns true if the country/province has an institution growth of at least X for the first not embraced institution.
alias[trigger:current_institution_growth] = float

## scope = Country
###Returns true if the parliament of the country has a least X seats.
alias[trigger:current_size_of_parliament] = int

## scope = Anywhere
###Hides the enclosed condition so that it is still required but cannot be seen by human players and displays the specified tooltip in its place.
alias[trigger:custom_trigger_tooltip] = {
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = Country
###Returns true if the country is in a defensive war with country X.
alias[trigger:defensive_war_with] = scope[country]
alias[trigger:defensive_war_with] = <country_tag>

## scope = Province
###Returns true if the devastation of the province is at least X.
alias[trigger:devastation] = int

## scope = Province
###Returns true if the development of the province is at least X.
alias[trigger:development] = int

## scope = Country
###Returns true if the country has X percent of its overlord's development
alias[trigger:development_of_overlord_fraction] = float[0.0..1.0]

## scope = Country
###Returns true if the country has at least X devotion, or at least as much devotion as the specified country.
alias[trigger:devotion] = int
alias[trigger:devotion] = scope[country]
alias[trigger:devotion] = <country_tag>

## scope = Country
###Returns true if the country has a ruler with a diplomatic skill of at least X.
alias[trigger:dip] = int[0..6]


## scope = Country
###Returns true if the country has a diplomatic reputation of at least X, or at least as much diplomatic reputation as the specified country.
alias[trigger:diplomatic_reputation] = int
alias[trigger:diplomatic_reputation] = scope[country]
alias[trigger:diplomatic_reputation] = <country_tag>

## scope = Country
###Returns true if the country has at least X diplomatic power, or at least as much diplomatic power as the specified country.
alias[trigger:dip_power] = int
alias[trigger:dip_power] = scope[country]
alias[trigger:dip_power] = <country_tag>

## scope = Country
###Returns true if the country has an diplomatic technology of at least level X.
alias[trigger:dip_tech] = int

## scope = Country
###Returns true if the dominant culture in the country is X.
alias[trigger:dominant_culture] = <culture> #todo: wiki says "capital"

## scope = Country
###Returns true if the dominant religion in the country is X.
alias[trigger:dominant_religion] = <religion> #todo: wiki says "capital"

## scope = Country
###Returns true if the country has at least X doom, or at least as much doom as the specified country.
alias[trigger:doom] = int
alias[trigger:doom] = scope[country]
alias[trigger:doom] = <country_tag>

## scope = Country
###Returns true if the ruling dynasty of the country is X, or is the same as that of country X.
alias[trigger:dynasty] = scalar #todo: dynasty name e.g. "von Habsburg"
alias[trigger:dynasty] = scope[country]
alias[trigger:dynasty] = <country_tag>

## scope = Anywhere
###Returns true if at least X Empire of China reforms are enacted. Works similar to hre_reform_level
alias[trigger:empire_of_china_reform_level] = int

## scope = Country
###Returns true if the country has employed an advisor with the specified characteristics.
alias[trigger:employed_advisor] = {
	## cardinality = 0..1
	is_male = bool
	## cardinality = 0..1
	religion = <religion>
	## cardinality = 0..1
	religion = scope[country]
	## cardinality = 0..1
	religion = <country_tag>
	## cardinality = 0..1
	culture = <culture>
	## cardinality = 0..1
	culture = scope[country]
	## cardinality = 0..1
	culture = <country_tag>
	## cardinality = 0..1
	type = <advisor_type>
	## cardinality = 0..1
	category = enum[power_types]
}

## scope = Country
###Returns true if the estate X in the country has at least Y influence.
alias[trigger:estate_influence] = {
    estate = <estate>
    influence = int[0..100]
}

## scope = Country
###Returns true if the estate X in the country has at least Y loyalty.
alias[trigger:estate_loyalty] = {
    estate = <estate>
    influence = int[0..100]
}

## scope = Country
###Returns true if the estate X in the country controls at least Y% of the total development.
alias[trigger:estate_loyalty] = {
    estate = <estate>
    territory = int[0..100]
}

## scope = Anywhere
###Returns true if country X or the scoped country exists.
alias[trigger:exists] = <country_tag> #todo: how about exists = FROM?
alias[trigger:exists] = bool


## scope = Country
###Returns true if the faction in power of the country is X.
alias[trigger:faction_in_power] = <faction>

## scope = Country
###Returns true if the faction X of the country has at least Y influence.
alias[trigger:faction_influence] = {
	faction = <faction>
	influence = int
}

## scope = Country
###Returns true if the federation with the country has at least X members.
alias[trigger:federation_size] = int

## scope = Country
###Returns true if the country has stored at least X fervor points.
alias[trigger:fervor] = int

## scope = Province
###Returns true if the fort in the province has at least level X.
alias[trigger:fort_level] = int

## scope = Country
###Returns true if the country has completed the X idea group.
alias[trigger:full_idea_group] = <idea_group>

## scope = Country
###Returns true if the ratio of the galley fraction to the navy size of the country is at least X.
alias[trigger:galley_fraction] = float[0..1]

## scope = Province
###Returns true if there are at least X galleys in the province, or if there are galleys from the specified country in the province.
alias[trigger:galleys_in_province] = int
alias[trigger:galleys_in_province] = scope[country]
alias[trigger:galleys_in_province] = <country_tag>

## scope = Province
###Returns true if the garrison is at X men. Note: Misleading tooltip.
alias[trigger:garrison] = int

## scope = Country
###Returns true if the country has an income from gold of at least X.
alias[trigger:gold_income] = float

## scope = Country
###Returns true if in the country the proportion of income from gold is at least X.
alias[trigger:gold_income_percentage] = float[0.0..1.0]

## scope = Country
###Returns true if the country has government type X.
alias[trigger:government] = <government_group> #todo (monarchy, republic, theocracy)
alias[trigger:government] = <government> #todo
alias[trigger:government] = tribal

## scope = Country
###Returns true if the country has a government rank of X or higher.
alias[trigger:government_rank] = int

## scope = Country
###Returns true if the country's total development has grown by the specified amount
alias[trigger:grown_by_development] = int

#todo: "or worse???"
## scope = Country
###Returns true if the country has a great power rank of X or worse. (Please tell Caligula if that is correct)
alias[trigger:great_power_rank] = int

## scope = Country
###Returns true if the country is guaranteed by X.
alias[trigger:guaranteed_by] = scope[country]
alias[trigger:guaranteed_by] = <country_tag>

## scope = Country
###Returns true if the country still has had the specified policy for at least X days.
alias[trigger:had_active_policy] = {
	policy = <policy>
	days = int
}

## scope = Country
###Returns true if the consort flag X was last set at least Y days ago.
alias[trigger:had_consort_flag] = {
	flag = scalar
	days = int
}

## scope = Country
###Returns true if the country flag X was last set for the country at least Y days ago.
alias[trigger:had_country_flag] = {
	flag = scalar
	days = int
}

## scope = anywhere
###Returns true if the global flag X was last set at least Y days ago.
alias[trigger:had_global_flag] = {
	flag = scalar
	days = int
}

## scope = Country
###Returns true if the heir flag X was last set at least Y days ago.
alias[trigger:had_heir_flag] = {
	flag = scalar
	days = int
}

## scope = province
###Returns true if the province flag X was last set for the province at least Y days ago.
alias[trigger:had_province_flag] = {
	flag = scalar
	days = int
}

## scope = Country
###Returns true if the country fought a war within the last X years.
alias[trigger:had_recent_war] = int

## scope = Country
###Returns true if the ruler flag X was last set for the current ruler at least Y days ago.
alias[trigger:had_ruler_flag] = {
	flag = scalar
	days = int
}

## scope = Country
###Returns true if the country's current harmonization progress is at least at X.
alias[trigger:harmonization_progress] = int

## scope = Country
###Returns true if the country has at least X harmony.
alias[trigger:harmony] = int

## scope = Country
###Returns true if the country has an ongoing debate in parliament.
alias[trigger:has_active_debate] = bool

## scope = Country
###Returns true if the country has activated a fervor effect.
alias[trigger:has_active_fervor] = bool

## scope = Country
###Returns true if country has the specified policy active.
alias[trigger:has_active_policy] = <policy> #todo

## scope = Country
###Returns true if the country has adopted the specified cult.
alias[trigger:has_adopted_cult] = <cult> #todo

## scope = Country
###Returns true if the country has hired an advisor. Warning: Inteprets every right side argument as yes.
alias[trigger:has_advisor] = yes

## scope = Country
###Returns true if the country has the specified age ability.
alias[trigger:has_age_ability] = <age_ability>

## scope = Country
###Returns true if the country is currently in a disaster.
alias[trigger:has_any_disaster] = bool

## scope = country
###Returns true if the country borders any country of a different religion. Interprets anything after '=' as "yes".
alias[trigger:has_border_with_religious_enemy] = yes

## scope = Province
###Returns true if there is the specified building in the province.
alias[trigger:has_building] = <building>

## scope = Province
###Returns true if the province has a cardinal in the curia.
alias[trigger:has_cardinal] = bool

## scope = Country
###Returns true if the country has a casus belli of type X against country Y.
alias[trigger:has_casus_belli] = {
	type = <casus_belli>
	target = scope[country]
	target = <country_tag>
}

## scope = Country
###Returns true if the country has a casus belli against country X.
alias[trigger:has_casus_belli_against] = scope[country]
alias[trigger:has_casus_belli_against] = <country_tag>

## scope = anywhere
###Returns true if playing as a released vassal.
alias[trigger:has_changed_nation] = bool

## scope = Country
###Returns true if the country has enabled the church aspect X.
alias[trigger:has_church_aspect] = <church_aspect> #todo

## scope = Province
###Returns true if the province has climate X.
alias[trigger:has_climate] = <climate> #todo

## scope = Country
###Returns true if the specified country is the colonial parent of the country.
alias[trigger:has_colonial_parent] = scope[country]
alias[trigger:has_colonial_parent] = <country_tag>

## scope = Province
###Returns true if scoped province has an active colonist.
alias[trigger:has_colonist] = bool

## scope = Country
###Returns true if country has a three star general.
alias[trigger:has_commanding_three_star] = bool

## scope = Country
###Returns true if the country has a consort.
alias[trigger:has_consort] = bool

## scope = Country
###Returns true if the consort flag X is set.
alias[trigger:has_consort_flag] = scalar

## scope = Country
###Returns true if the country has a consort regency.
alias[trigger:has_consort_regency] = bool

## scope = Province
###Returns true if there is the specified construction in progress in the province.
alias[trigger:has_construction] = enum[construction_types]

## scope = Country
###Returns true if the flag X is set for the country.
alias[trigger:has_country_flag] = scalar

## scope = Country
###Returns true if the country has the modifier X.
alias[trigger:has_country_modifier] = <country_modifier>

## scope = Country
###Returns true if the country has custom ideas.
alias[trigger:has_custom_ideas] = bool

## scope = Country
###Returns true if the country is currently in the disaster X.
alias[trigger:has_disaster] = <disaster> #todo

## scope = Country
###Returns true if the disaster progress of the specified disaster is at least X in the country.
alias[trigger:has_disaster_progress] = {
	disaster = <disaster>
	value = int[0..100]
}

## scope = Country
###Returns true if the country has discovered the province with the ID X.
alias[trigger:has_discovered] = <province_id>

## scope = Province
###Returns true if the country X has discovered the province.
alias[trigger:has_discovered] = scope[country]
alias[trigger:has_discovered] = <country_tag>

## scope = Anywhere
###Returns true if the DLC X is enabled.
alias[trigger:has_dlc] = enum[DLCs]

## scope = (Subject) Country
###Returns true if the protectorate has divert trade to its overlord.
alias[trigger:has_divert_trade] = bool

## scope = (Subject) Country
###Returns true if the subject nation is embargoing overlord's rivals.
alias[trigger:has_embargo_rivals] = bool

## scope = Province
###Returns true if an adjacent province is uncolonized. Warning: Works only with 'yes'.
alias[trigger:has_empty_adjacent_province] = yes


## scope = Country, Province
###Returns true if the country has estate X.
alias[trigger:has_estate] = <estate> #todo

## scope = Province
###Returns true if the province is controlled by an estate, or is controlled by estate X.
alias[trigger:has_estate] = bool
alias[trigger:has_estate] = <estate>

## scope = Country
###Returns true if the estate X in the country has the influence modifier Y.
alias[trigger:has_estate_influence_modifier] = {
	estate = <estate>
	modifier = complex_enum[estate_influence_modifier] #todo
}

## scope = Country
###Returns true if the estate X in the country has the loyalty modifier Y.
alias[trigger:has_estate_loyalty_modifier] = {
	estate = <estate>
	modifier = complex_enum[estate_loyalty_modifier] #todo
}

## scope = Country
###Returns true if the country has the specified faction.
alias[trigger:has_faction] = <faction> #todo

## scope = Country
###Returns true if country has factions.
alias[trigger:has_factions] = bool

## scope = Country
###Returns true if the country has a female consort.
alias[trigger:has_female_consort] = bool

## scope = Country
###Returns true if the country has a female heir.
alias[trigger:has_female_heir] = bool

## scope = Anywhere
###Returns true if a revolution has happened in the world.
alias[trigger:has_first_revolution_started] = bool

## scope = Country
###Returns true if the country has foreign consort.
alias[trigger:has_foreign_consort] = bool

## scope = Country
###Returns true if the country has foreign heir.
alias[trigger:has_foreign_heir] = bool

## scope = Country
###Returns true if the country has a friendly center of reformation.
alias[trigger:has_friendly_reformation_center] = bool

## scope = Global
###Returns true if the game has started.
alias[trigger:has_game_started] = bool

## scope = Country
###Returns true if the scoped country has given a consort to the specified country.
alias[trigger:has_given_consort_to] = scope[country]
alias[trigger:has_given_consort_to] = <country_tag>

## scope = Province
###Returns true if the country has the specified great project.
alias[trigger:has_great_project] = <great_project> #todo

## scope = Country
###Returns true if the country has guaranteed country X.
alias[trigger:has_guaranteed] = scope[country]
alias[trigger:has_guaranteed] = <country_tag>

## scope = Anywhere
###Returns true if the specified global flag is set.
alias[trigger:has_global_flag] = scalar

## scope = Country
###Returns true if the value of the specified modifier is at least X for the country.
alias[trigger:has_global_modifier_value] = {
	which = <global_modifier> #todo (what are these?)
	value = float
}

## scope = Country
###Returns true, if the country uses the specified government mechanic.
alias[trigger:has_government_mechanic] = enum[government_mechanics]

#Todo: What does this do?
## scope = Country
###Please tell Caligula and Dayshine if you know what this does and what values are accepted here.
alias[trigger:has_government_power] = unknown

## scope = Country
###Returns true if the country has harmonized with the specified religion or religion group.
alias[trigger:has_harmonized_with] = <religion>
alias[trigger:has_harmonized_with] = <religion_group> #todo

## scope = province
###Returns true if the province has harsh treatment (I presume -Caligula).
alias[trigger:has_harsh_treatment] = bool

## scope = Country
###Returns true if the country has an heir (named X).
alias[trigger:has_heir] = bool
alias[trigger:has_heir] = scalar #todo: name

## scope = Country
###Returns true if the heir flag X is set.
alias[trigger:has_heir_flag] = scalar

## scope = Province
###Returns true if an army in the province is led by an heir from X.
alias[trigger:has_heir_leader_from] = scope[country]
alias[trigger:has_heir_leader_from] = <country_tag>

## scope = Country
###Returns true if the country has a hostile center of reformation.
alias[trigger:has_hostile_reformation_center] = bool

## scope = Country
###Returns true if the country has the X idea.
alias[trigger:has_idea] = <idea> #todo

## scope = Country
###Returns true if the country has chosen the X idea group.
alias[trigger:has_idea_group] = <idea_group> #todo

## scope = Province
###Returns true if the province has an influencing fort.
alias[trigger:has_influencing_fort] = bool

## scope = Country
###Returns true if the country has the specified institution.
alias[trigger:has_institution] = <institution> #todo

## scope = Country
###Returns true if the country has the leader "X".
alias[trigger:has_leader] = scalar #todo: name

## scope = Country
###Returns true if the country has a leader with at least the specified stats.
alias[trigger:has_leader_with] = {
	## cardinality = 0..1
	enum[military_leader_types] = yes #todo: does this work? If so, elegant solution to "either/or"
	## cardinality = 0..1
	fire = int
	## cardinality = 0..1
	shock = int
	## cardinality = 0..1
	manuever = int
	## cardinality = 0..1
	siege = int
}

## scope = Province
###Returns true if the value of the specified modifier is at least X for the province..
alias[trigger:has_leader_with] = {
	which = <local_modifier> #todo: what is this?
	value = float
}

## scope = Country
###Returns true if the country has the specified religion or syncretic faith, or the same religion or syncretic faith as the specified country.
alias[trigger:has_matching_religion] = <religion>
alias[trigger:has_matching_religion] = scope[country]
alias[trigger:has_matching_religion] = <country_tag>

## scope = trade_node
###Returns true if the scoped country has an active merchant in the trade node.
alias[trigger:has_merchant] = scope[country]
alias[trigger:has_merchant] = <country_tag>

## scope = Province
###Returns true if the province has an active missionary.
alias[trigger:has_missionary] = bool

## scope = trade_node
###Returns true if the country X has most amount of trade power in trade node.
alias[trigger:has_most_province_trade_power] = scope[country]
alias[trigger:has_most_province_trade_power] = <country_tag>

## scope = country
###Returns true if the country has a new dynasty.
alias[trigger:has_new_dynasty] = bool

## scope = country
###Returns true if the country has at least value opinion of the country specified by who.
alias[trigger:has_opinion] = {
	who = scope[country]
	who = <country_tag>
	value = int
}

## scope = country
###Returns true if opinion difference between country X and Y, is at least Z.
alias[trigger:has_opinion_diff] = int

## scope = country
###Returns true if the country has the opinion modifier modifier towards the country specified by who. Can also specify a value of the modifier (but it is not displayed).
alias[trigger:has_opinion_modifier] = {
	who = scope[country]
	who = <country_tag>
	modifier = <opinion_modifier> #todo
}

## scope = Province
###Returns true if the culture of the province is accepted by its owner.
alias[trigger:has_owner_accepted_culture] = bool

## scope = Province
###Returns true if the province has the culture of its owner.
alias[trigger:has_owner_culture] = bool

## scope = Province
###Returns true if the province has the religion of its owner.
alias[trigger:has_owner_religion] = bool

## scope = Country
###Returns true if the country has a parliament.
alias[trigger:has_parliament] = bool

## scope = Country
###Returns true if the ruler of the country has picked the specified personal deity.
alias[trigger:has_personal_deity] = <personal_deity> #todo

## scope = Province
###Returns true if it is a coastal province.
alias[trigger:has_port] = bool

## scope = Country
###Returns true if the country has privateers in any trade node.
alias[trigger:has_privateers] = bool

## scope = Country
###Returns true if the country is promoting investments in the specified trade company (region).
alias[trigger:has_promote_investments] = <trade_company> #todo

## scope = Province
###Returns true if the province has the province flag X.
alias[trigger:has_province_flag] = scalar

## scope = Province
###Returns true if province has the province modifier X.
alias[trigger:has_province_modifier] = <province_modifier>

## scope = Province
###Returns true if the province is controlled by (the specified) rebel faction. =REB is used in Vanilla but apparently doesn't work as of 1.25
alias[trigger:has_rebel_faction] = <rebel_type> #todo
alias[trigger:has_rebel_faction] = REB

## scope = Country
###Returns true if the country has a regency.
alias[trigger:has_regency] = bool

## scope = Country
###Returns true if the country has lifted the fog of war from the specified country.
alias[trigger:has_removed_fow] = bool

## scope = Country
###Returns true if the country has a ruler named "X".
alias[trigger:has_ruler] = scalar #todo: name

## scope = Country
###Returns true if the ruler flag X is set for the country.
alias[trigger:has_ruler_flag] = scalar

## scope = Province
###Returns true if an army in the province is led by a ruler from X.
alias[trigger:has_ruler_leader_from] = scope[country]
alias[trigger:has_ruler_leader_from] = <country_tag>

## scope = Country
###Returns true if the country has the modifier X until the ruler changes.
alias[trigger:has_ruler_modifier] = <ruler_modifier> #todo

## scope = anywhere
###Returns true if the specified event target has been saved.
alias[trigger:has_saved_event_target] = scalar

## scope = (Subject) Country
###Returns true if the vassal pays scutage.
alias[trigger:has_scutage] = bool

## scope = Province
###Returns true if the province has a seat in parliament.
alias[trigger:has_seat_in_parliament] = bool

## scope = Country
###Returns true if the county has a secondary religion.
alias[trigger:has_secondary_religion] = bool

## scope = (Subject) Country
###Returns true if the protectorate has received officers.
alias[trigger:has_send_officers] = bool

## scope = Province
###Returns true if the province is under siege.
alias[trigger:has_siege] = bool

## scope = Country
###Returns true if rebels of the specified type are active in the country.
alias[trigger:has_spawned_rebels] = <rebel_type>

## scope = Country
###Returns true if rebels which were supported by the secified country are active in the country.
alias[trigger:has_spawned_supported_rebels] = scope[country]
alias[trigger:has_spawned_supported_rebels] = <country_tag>

## scope = Country
###Returns true if the country X has a spy network of at least the specified size in the country.
alias[trigger:has_spy_network_from] = {
	who = scope[country]
	who = <country_type>
	value = int
}

## scope = Country
###Returns true if the country has a spy network of at least the specified size in country X.
alias[trigger:has_spy_network_in] = {
	who = scope[country]
	who = <country_type>
	value = int
}

## scope = Province
###Returns true if the province has any state patriarch.
alias[trigger:has_state_patriach] = bool

## scope = Country
###Returns true if the country is a march with subsidized armies.
alias[trigger:has_subsidize_armies] = bool

## scope = (Subject) Country
###Returns true if the country is a subject nation which receives support for loyalists.
alias[trigger:has_support_loyalists] = bool

## scope = Anywhere
###Returns true if the player has changed nation by playing as a released vassal.
alias[trigger:has_switched_nation] = bool

## scope = Province
###Returns true if the province has terrain X.
alias[trigger:has_terrain] = <terrain> #todo

## scope = trade_node
###Returns true the specified country has the trade modifier X in the trade node.
alias[trigger:has_trade_modifier] = {
	who = scope[country]
	who = <country_tag>
	key = <trade_modifier> #todo
}

## scope = trade_node
###Returns true if the specified country has a merchant in the trade node.
alias[trigger:has_trader] = scope[country]
alias[trigger:has_trader] = <country_tag>

## scope = Country
###Returns true if the country has truce.
alias[trigger:has_truce] = scope[country]
alias[trigger:has_truce] = <country_tag>

## scope = Country
###Returns true if the country owns all provinces of its culture group.
alias[trigger:has_unified_culture_group] = bool

## scope = Country
###Returns true if the country has selected unit type X as preferable unit.
alias[trigger:has_unit_type] = <unit_type> #todo

## scope = Country
###Returns true if the country has unlocked the specified cult.
alias[trigger:has_unlocked_cult] = <cult>

## scope = Country
###Returns true if the country has raised war taxes.
alias[trigger:has_wartaxes] = bool

## scope = Province
###Returns true if the province has winter X.
alias[trigger:has_winter] = <winter_type> #todo

## scope = Country
###Returns true if the ratio of the heavy ship fraction to the navy size of the country is at least X.
alias[trigger:heavy_ship_fraction] = float[0.0..1.0]

## scope = Province
###Returns true if there are at least X heavy ships in the province, or if there are heavy ships from the specified country in the province.
alias[trigger:heavy_ships_in_province] = int
alias[trigger:heavy_ships_in_province] = scope[country]
alias[trigger:heavy_ships_in_province] = <country_tag>

## scope = Country
###Returns true if the country has an heir with an administrative skill of at least X.
alias[trigger:heir_adm] = int[0..6]

## scope = Country
###Returns true if the country has an heir that is at least X years old.
alias[trigger:heir_age] = int

## scope = Country
###Returns true if the country has an heir with a diplomatic skill of at least X.
alias[trigger:heir_dip] = int[0..6]

## scope = Country
###Returns true if the country has an heir with a claim strength of at least X.
alias[trigger:heir_claim] = int[0..100]

## scope = Country
###Returns true, if the country's heir has the specified culture. Can utilise Event Scope Values.
alias[trigger:heir_culture] = <culture>
alias[trigger:heir_culture] = scope[country]
alias[trigger:heir_culture] = <country_tag>

## scope = Country
###Returns true if the country's heir and consort have the same dynasty.
alias[trigger:heir_has_consort_dynasty] = bool

## scope = Country
###Returns true if the country's heir has the specified personality.
alias[trigger:heir_has_personality] = <personality> #todo

## scope = Country
###Returns true if the country's heir and ruler have the same dynasty.
alias[trigger:heir_has_ruler_dynasty] = bool

## scope = Country
###Returns true if the country has an heir with a military skill of at least X.
alias[trigger:heir_mil] = int[0..6]

## scope = Country
###Returns true if the country has an heir with nationality X.
alias[trigger:heir_nationality] = scope[country]
alias[trigger:heir_nationality] = <country_tag>

## scope = Country
###Returns true, if the country's heir has the specified religion. Can utilise Event Scope Values.
alias[trigger:heir_religion] = <culture>
alias[trigger:heir_religion] = scope[country]
alias[trigger:heir_religion] = <country_tag>

## scope = anywhere
###Hides the enclosed conditions so that they are still required but cannot be seen by human players.
alias[trigger:hidden_trigger] = {
	alias_name[trigger] = alias_match_left[trigger]
}

## scope = trade_node
###Returns true if the trade node is the highest valued trade node in the world. The value is calculated as total trade value minus outgoing trade value.
alias[trigger:highest_value_trade_node] = bool

## scope = Country
###Returns true if the countries are historical friends.
alias[trigger:historical_friend_with] = scope[country]
alias[trigger:historical_friend_with] = <country_tag>

## scope = Country
###Returns true if the countries are historical rivals
alias[trigger:historical_rival_with] = scope[country]
alias[trigger:historical_rival_with] = <country_tag>

## scope = Country
###Returns true if the country has a horde unity of at least X, or at least as much horde unity as the specified country.
alias[trigger:horde_unity] = int
alias[trigger:horde_unity] = scope[country]
alias[trigger:horde_unity] = <country_tag>

## scope = Anywhere
###Returns true if the specified religion is the opposition religion of the HRE. Note: No localisation for the negation.
alias[trigger:hre_heretic_religion] = <religion>
alias[trigger:hre_heretic_religion] = scope[country]
alias[trigger:hre_heretic_religion] = <country_tag>

## scope = Anywhere
###Returns true if religious leagues are enabled.
alias[trigger:hre_leagues_enabled] = bool

## scope = Anywhere
###Returns true if the Xth imperial reform is enacted.
alias[trigger:hre_reform_level] = int

## scope = Anywhere
###Returns true if the specified religion is the dominant faith of the HRE.
alias[trigger:hre_religion] = <religion>
alias[trigger:hre_religion] = scope[country]
alias[trigger:hre_religion] = <country_tag>

## scope = Anywhere
###Returns true if an official faith of the HRE has been permanently established.
alias[trigger:hre_religion_locked] = bool

## scope = Anywhere
###Returns true if the treaty of religious peace in the HRE has been signed.
alias[trigger:hre_religion_treaty] = bool

## scope = Anywhere
###Returns true if the HRE contains at least X members.
alias[trigger:hre_size] = int

## scope = Anywhere
###Returns true if the emperor of the HRE has an imperial authority of at least X.
alias[trigger:imperial_influence] = int

## scope = Anywhere
###Returns true if the emperor of China has at least X mandate.
alias[trigger:imperial_mandate] = int

## scope = Country
###Returns true if the country currently is in a golden age.
alias[trigger:in_golden_age] = bool

## scope = Country
###Returns true if the ratio of the infantry fraction to the army size of the country is at least X.
alias[trigger:infantry_fraction] = float[0.0..1.0]

## scope = Province
###Returns true if there are at least X infantry units in the province.
alias[trigger:infantry_in_province] = int

## scope = country
###Returns true if the country has an inflation of at least X, or t least as much inflation as the country X.
alias[trigger:inflation] = int
alias[trigger:inflation] = scope[country]
alias[trigger:inflation] = <country_tag>

## scope = country
###Returns true if the value of the specified incident is at least X.
alias[trigger:incident_variable_value] = {
	incident = <incident>
	value = int
}

## scope = country
###Returns true if the country has embraced at least X more institutions than the specified country.
alias[trigger:institution_difference] = {
	who = scope[country]
	who = <country_tag>
	value = int
}

## scope = Country
###Returns true if the country has invested at least X papal influence in the election of the next papal controller.
alias[trigger:invested_papal_influence] = int

## scope = Country
###Returns true if the countries is in the X league.
alias[trigger:in_league] = <league> #todo

## scope = Anywhere
###Returns true if the ironman mode is enabled
alias[trigger:ironman] = bool

## scope = country
###Returns true if the advisor with the ID X is employed.
alias[trigger:is_advisor_employed] = <advisor_id>

## scope = Country
###Returns true if the country is at war.
alias[trigger:is_at_war] = bool

## scope = Province
###Returns true if the province is backing the current issue in the parliament.
alias[trigger:is_backing_current_issue] = bool

## scope = Country
###Returns true if the country is bankrupt.
alias[trigger:is_bankrupt] = bool

## scope = Province
###Returns true if the province is blockaded.
alias[trigger:is_blockaded] = bool

## scope = Province
###Returns true if the province is a capital.
alias[trigger:is_capital] = bool

## scope = Province
###Returns true if the province is a city, i.e. has a population of at least 1000.
alias[trigger:is_city] = bool

## scope = Country
###Returns true if the country has a claim on the province with the ID X.
alias[trigger:is_claim] = <province_id>

## scope = Province
###Returns true if the specified country has a claim on the province.
alias[trigger:is_claim] = scope[country]
alias[trigger:is_claim] = <country_tag>

## scope = Country
###Returns true if the country is a client state.
alias[trigger:is_client_nation] = bool

## scope = Country
###Returns true if the country is a client state of X.
alias[trigger:is_client_nation_of] = scope[country]
alias[trigger:is_client_nation_of] = <country_tag>

## scope = Country
###Returns true if the country is a non-independent colonial nation.
alias[trigger:is_colonial_nation] = bool

## scope = Country
###Returns true if the country is a colonial nation of X.
alias[trigger:is_colonial_nation_of] = scope[country]
alias[trigger:is_colonial_nation_of] = <country_tag>

## scope = Province
###Returns true if the province is a colony.
alias[trigger:is_colony] = bool

## scope = Country
###Returns true if the country has a core on the province with the ID X.
alias[trigger:is_core] = <province_id>

## scope = Province
###Returns true if the country X has a core on the province.
alias[trigger:is_core] = scope[country]
alias[trigger:is_core] = <country_tag>


## scope = Country
###Returns true if the country is the target of a crusade.
alias[trigger:is_crusade_target] = bool

## scope = Country
###Returns true if the country is the defender of the faith.
alias[trigger:is_defender_of_faith] = bool

## scope = Country
###Returns true, if the country is a dynamically created tag (e.g. client states).
alias[trigger:is_dynamic_tag] = bool

## scope = Country
###Returns true if the country is an elector of the HRE.
alias[trigger:is_elector] = bool

## scope = Country
###Returns true if the country is the emperor of the HRE.
alias[trigger:is_emperor] = bool

## scope = Country
###Returns true if the country is the emperor of China.
alias[trigger:is_emperor_of_china] = bool

## scope = Province
###Returns true if province is empty
alias[trigger:is_empty] = bool

## scope = Country
###Returns true the country views country X as an enemy.
alias[trigger:is_enemy] = bool

## scope = Country
###Returns true if the ruler of the country is excommunicated.
alias[trigger:is_excommunicated] = bool

## scope = Country
###Returns true if the country is a federation leader.
alias[trigger:is_federation_leader] = bool

## scope = Country
###Returns true if ruler of the country is female.
alias[trigger:is_female] = bool

## scope = Country
###Returns true if country has been force-converted via either religious rebels or an Enforce Religion peace treaty. Note: The subject interaction Enforce Religion does not cause the subject to be considered as force-converted.
alias[trigger:is_force_converted] = bool

## scope = Country
###Returns true if the country is a colonial nation that has gained independence.
alias[trigger:is_former_colonial_nation] = bool

## scope = Country
###Returns true if the country is a great power.
alias[trigger:is_great_power] = bool

## scope = Country
###Returns true, if the country is currently harmonizing with the specified religion or religion group.
alias[trigger:is_harmonizing_with] = scope[country]
alias[trigger:is_harmonizing_with] = <country_tag>

## scope = Country
###Returns true if the heir of the country is a general. Note: Proper localisation for the negation only with NOT = ...
alias[trigger:is_heir_leader] = bool

## scope = Anywhere
###Returns true if the emperor has a casus belli on occupiers of the Empire. Note: Enabled/Disabled with Call for Reichsreform.
alias[trigger:is_imperial_ban_allowed] = bool

## scope = Country
###Returns true, if the specified incident is active. Allowed parameters are <incident>, yes/no, any and none.
alias[trigger:is_incident_active] = <incident>
alias[trigger:is_incident_active] = bool
alias[trigger:is_incident_active] = any
alias[trigger:is_incident_active] = none

## scope = Country
###Returns true, if the specified incident already happened.
alias[trigger:is_incident_happened] = <incident>

## scope = Country
###Returns true, if the specified incident can possibly happen.
alias[trigger:is_incident_possible] = <incident>

## scope = Country
###Returns true, if the specified incident is visible and therefore can happen in the future.
alias[trigger:is_incident_potential] = <incident>

## scope = Anywhere
###Returns true if the specified institution has been discovered.
alias[trigger:is_institution_enabled] = <institution>

## scope = Province
###Returns true if the province is the origin of the specified institution.
alias[trigger:is_institution_origin] = Attention!!! <institution>

## scope = Province
###Returns true if the province is in the capital area of its owner (i.e. has a land connection to the owner’s capital through whose provinces).
alias[trigger:is_in_capital_area] = bool

## scope = Country
###Returns true if the country is in a coalition.
alias[trigger:is_in_coalition] = bool

## scope = Country
###Returns true if the country is fighting a coalition war.
alias[trigger:is_in_coalition_war] = bool

## scope = Country
###Returns true if the country is running a deficit.
alias[trigger:is_in_deficit] = bool

## scope = Country
###Returns true if the country is in a religious league war.
alias[trigger:is_in_league_war] = bool

## scope = Country
###Returns true if the country is a member of a trade league.
alias[trigger:is_in_trade_league] = bool

## scope = Country
###Returns true if the country is a member of the same trade league as country X.
alias[trigger:is_in_trade_league_with] = scope[country]
alias[trigger:is_in_trade_league_with] = <country_tag>

## scope = Country
###Returns true if the country is at war and the mentioned conditions are fulfilled.
alias[trigger:is_in_war] = {
	## cardinality = 0..1
	attacker_leader = scope[country]
	## cardinality = 0..1
	attacker_leader = <country_tag>
	## cardinality = 0..1
	defender_leader = scope[country]
	## cardinality = 0..1
	defender_leader = <country_tag>
	
	## cardinality = 0..1
	duration = int
	
	#These are according to the Wiki. Not sure where its info is from
	## cardinality = 0..1
	casus_belli = <casus_belli>

	## cardinality = 0..1
	war_score = int[0..100]
	
	## cardinality = 0..1
	start_date = scalar #todo: date
	
	## cardinality = 0..1
	war_goal_province = <province_id>
	
	# defenders, attackers, participants (not sure what these are meant to look like)
}

## scope = Province
###Returns true if the province is an island, i.e. has no neighboring land province and no reachable province via a strait.
alias[trigger:is_island] = bool

## scope = Country
###Returns true if country X is league enemy of the country('s league).
alias[trigger:is_league_enemy] = scope[country]
alias[trigger:is_league_enemy] = <country_tag>

## scope = Country
###Returns true, if the country is in the same religious league as the specified country.
alias[trigger:is_league_friend] = scope[country]
alias[trigger:is_league_friend] = <country_tag>

## scope = Country
###Returns true if the country leads a religious league.
alias[trigger:is_league_leader] = bool

## scope = Country
###Returns true if the country is the lesser partner in a personal union.
alias[trigger:is_lesser_in_union] = bool

## scope = Province
###Returns true if the province is looted.
alias[trigger:is_looted] = bool

## scope = Country
###Returns true if the ruler of the country is a general.
alias[trigger:is_monarch_leader] = bool

## scope = Anywhere
###Returns true if the current month is at least X (zero based).
alias[trigger:is_month] = int[1..12]

## scope = Country
###Returns true if the country is a march.
alias[trigger:is_march] = bool

## scope = Country
###Returns true if the country is neighbor of X.
alias[trigger:is_neighbor_of] = scope[country]
alias[trigger:is_neighbor_of] = <country_id>

## scope = Province
###Returns true, if the province's trade node is in a trade company region.
alias[trigger:is_node_in_trade_company_region] = bool

## scope = Country
###Returns true if country's government is nomadic. Note: Only the Steppe Nomads government is flagged as nomadic.
alias[trigger:is_nomad] = bool

## scope = Country
###Returns true if in the country the orangists are in power.
alias[trigger:is_orangists_in_power] = bool

## scope = Country
###Returns true if the specified country is the origin country of the scoped country’s consort.
alias[trigger:is_origin_of_consort] = scope[country]
alias[trigger:is_origin_of_consort] = <country_id>

## scope = Province
###Returns true if the province is overseas
alias[trigger:is_overseas] = bool

## scope = Country (subject)
###Returns true if the subject is overseas.
alias[trigger:is_overseas_subject] = bool

## scope = Province
###Returns true if the province belongs to a trade company.
alias[trigger:is_owned_by_trade_company] = bool

## scope = Country
###Returns true if the country is the papal controller.
alias[trigger:is_papal_controller] = bool

## scope = Country, province
###Returns true if the country/province is part of the HRE.
alias[trigger:is_part_of_hre] = bool

## scope = Province
###Returns true if the province is a permanent claim of X.
alias[trigger:is_permanent_claim] = scope[country]
alias[trigger:is_permanent_claim] = <country_id>

## scope = Country
###Returns true if the country is a player-designed custom nation.
alias[trigger:is_playing_custom_nation] = bool

## scope = Country
###Returns true if vassal X is a possible march of the country.
alias[trigger:is_possible_march] = scope[country]
alias[trigger:is_possible_march] = <country_id>

## scope = Country
###Returns true if country X is releasable as vassal of the country.
alias[trigger:is_possible_vassal] = scope[country]
alias[trigger:is_possible_vassal] = <country_id>

## scope = Country
###Returns true if the country is the previous papal controller.
alias[trigger:is_previous_papal_controller] = bool

## scope = Province
###Returns true if the province is prosperous. NOTE: Does not have a tooltip.
alias[trigger:is_prosperous] = bool

## scope = Country
###Returns true if the country is a protectorate
alias[trigger:is_protectorate] = bool

## scope = Anywhere
###Returns true if playing with a random New World.
alias[trigger:is_random_new_world] = bool

## scope = Global
###Returns true if the province is a reformation center.
alias[trigger:is_reformation_center] = bool

## scope = Province
###Returns true if the province has been granted to any country, to no country or to a specific country.
alias[trigger:is_religion_grant_colonial_claim] = bool
alias[trigger:is_religion_grant_colonial_claim] = scope[country]
alias[trigger:is_religion_grant_colonial_claim] = <country_id>

## scope = Anywhere
###Returns true if the specified religion is enabled.
alias[trigger:is_religion_enabled] = <religion>

## scope = Country
###Returns true if the country has reformed their religion.
alias[trigger:is_religion_reformed] = bool

## scope = Country
###Returns true if the country is the revolution target.
alias[trigger:is_revolution_target] = bool

## scope = Country
###Returns true if country X is a rival of the country.
alias[trigger:is_rival] = scope[country]
alias[trigger:is_rival] = <country_tag>

## scope = Province
###Returns true if the province is sea. Mostly used for trade nodes.
alias[trigger:is_sea] = bool

## scope = Province
###Returns true if the province is in a state.
alias[trigger:is_state] = bool

## scope = Country
###Returns true if the country has a state core on the province with the ID X.
alias[trigger:is_state_core] = <province_id>

## scope = Province
###Returns true if the specified country has a claim on the province.
alias[trigger:is_state_core] = scope[country]
alias[trigger:is_state_core] = <country_tag>




is_statists_in_power	Boolean	Returns true if in the country the statists are in power.	Province	is_statists_in_power = yes
is_strongest_trade_power	Tag, Scope	Returns true if the specified country has the most trade power in the area.	Province
(Trade node)	is_strongest_trade_power = POR
is_subject	Boolean	Returns true if the country is a subject.	Country	is_subject = yes
is_subject_of	Tag	Returns true if the country is a subject of X.	Country	is_subject_of = FRA
is_subject_of_type	Identifier	Returns true if the country is a subject of subject type.	Country	is_subject_of_type = tributary_state
is_territorial_core	Province ID	Returns true if the country has a territorial core on the province with the ID X.	Country	is_territorial_core = 950
Tag, Scope	Returns true if the country X has a territorial core on the province.	Province	is_territorial_core = NED
is_territory	Boolean	Returns true if the province is in a territory.	Province	is_territory = no
is_threat	Tag, Scope	Returns true if country X is threatened by the country.	Country	is_threat = ROOT
is_trade_league_leader	Boolean	Returns true if the country is the leader of a trade league.	Country	is_trade_league_leader = yes
is_tribal	Boolean	Returns true if the country has a tribal government.
(Note: Government types that allow migration are not considered tribal.)	Country	is_tribal = yes
is_vassal	Boolean	Returns true if the country is a vassal.	Country	is_vassal = yes
is_variable_equal	Clause	Returns true if the specified variable is equal to X.		
is_variable_equal = {
	which = myvar
	value = 5
}
is_wasteland	Boolean	Returns true if the province is wasteland.	Province	is_wasteland = yes
is_year	Integer	Returns true if the current year is at least X.	Anywhere	is_year = 1750
island	Boolean	Returns true if the province is an island, i.e. has no neighboring land provinces.	Province	island = yes
isolationism	Integer	Returns true if the country has a isolationism level of at least X.	Country	isolationism = 2
janissary_percentage	Float	Returns true if the country has an army of at least X k janissaries.
Cradle of Civilization.png Available only with the Cradle of Civilization DLC enabled.	Country	janissary_percentage = 0.3
junior_union_with	Tag, Scope	Returns true if the country is the junior partner in a personal union under country X.	Country	junior_union_with = ENG
karma	Integer	Returns true if the country has a karma of at least X.	Country	karma = -50
Tag, Scope	Returns true if the country has at least as much karma as the specified country.	Country	karma = DAI
knows_country	Tag. Scope	Returns true if the country has knowledge of country X.	Country	knows_country = INC
land_forcelimit	Integer	Returns true if the country has a land force limit of at least X.	Country	land_forcelimit = 32
Tag, Scope	Returns true if the country has a land force limit of at least as much regiments than the specified country.	Country	land_forcelimit = ROOT
land_maintenance	Float	Returns true if the country has set its land maintenance to X.	Country	land_maintenance = 0.90
land_morale	Float	Returns true if the country has a morale of armies of at least X.	Country	land_morale = 3.5
Tag, Scope	Returns true if the country has an at least as high morale of armies as the specified country.	Country	land_morale = PRU
last_mission	Identifier	Returns true if the last mission of the country was the specified mission.	Country	NOT = { last_mission = conquer_finland }
legitimacy	Integer	Returns true if the country has at least X legitimacy.	Country	legitimacy = 100
Tag, Scope	Returns true if the country has at least as much legitimacy as the specified country.	Country	legitimacy = ENG
legitimacy_equivalent	Integer	Returns true if the country's legitimacy equivalent (legitmacy, republican tradition, devotion, horde unity, meritocracy etc.) is at least X.	Country	legitimacy_equivalent = 80
Tag, Scope	Returns true if the country has at least as much legitimacy equivalent (legitmacy, republican tradition, devotion, horde unity, meritocracy etc.) as the specified country.	Country	legitimacy_equivalent = FRA
legitimacy_or_horde_unity	Integer	Returns true if the country has at least X legitimacy or horde unity.	Country	legitimacy_or_horde_unity = 90
Tag, Scope	Returns true if the country has at least as much legitimacy or horde unity as the specified country.	Country	legitimacy_or_horde_unity = ROOT
liberty_desire	Integer	Return true if the subject has a liberty desire of at least X.	Country (subject)	liberty_desire = 50
light_ship_fraction	Float	Returns true if the ratio of the light ship fraction to the navy size of the country is at least X.	Country	light_ship_fraction = 0.3
light_ships_in_province	Integer	Returns true if there are at least X light ships in the province.	Province	light_ships_in_province = 10
Tag, Scope	Returns true if there are light ships from the specified country in the province.	Province	light_ships_in_province = ROOT
likely_rebels	Identifier	Returns true if the province has the specified rebel faction as likely rebels.	Province	likely_rebels = revolutionary_rebels
local_autonomy	Integer	Returns true if the province has a local autonomy of at least X.	Province	local_autonomy = 50
local_autonomy_above_min	Float	Returns true if the province's local autonomy is at least X above the local development's minimun value.	Province	local_autonomy_above_min = 10
luck	Boolean	Returns true if the country is a lucky nation. (AI controlled counties only.)	Country	luck = yes
march_of	Tag, Scope	Returns true if the country is a march under country X.	Country	march_of = PAP
manpower	Integer	Returns true if the country has at least \text{X}\cdot1000 available manpower.	Country	manpower = 22
manpower_percentage	Float	Returns true if the country has a manpower level of at least X%.	Country	manpower_percentage = 0.50
marriage_with	Tag, Scope	Returns true if the country has a royal marriage with X.	Country	marriage_with = ROOT
max_manpower	Integer	Returns true if the country has at least \text{X}\cdot1000 maximum manpower.	Country	max_manpower = 5
mercantilism	Float	Returns true if the country's mercantilism is at least X.	Country	mercantilism = 5
meritocracy	Integer	Returns true if the country has a meritocracy value of at least X.	Country	meritocracy = 80
mil	Integer	Returns true if cthe ountry has a ruler with a military skill of at least X.	Country	mil = 6
Tag, Scope	Returns true if the country has a ruler with at least as high military skill as the ruler of the specified country.	Country	dip = HJO
militarised_society	Integer	Returns true if the country has a militarization of country of at least X.	Country	militarized_society = 20
mil_power	Integer	Returns true if the country has at least X military power.	Country	mil_power = 333
Tag, Scope	Returns true if the country has at least as much military power than the specified country.	Country	mil_power = MAM
mil_tech	Integer	Returns true if the country has an military technology of at least level X.	Country	mil_tech = 4
monthly_income	Integer	Returns true if the country has a monthly income of at least X.	Country	monthly_income = 5
Tag, Scope	Returns true if the country has an at least as high monthly income as the specified country.	Country	mil_power = MAM
months_of_ruling	Integer	Returns true if the country has a ruler that has ruled for at least X months.	Country	months_of_ruling = 12
months_since_defection	Integer	Returns true if the province defected within the last X months.	Province	months_since_defection = 12
military_strength	Clause	Returns true if the country's military strength (army size & navy size combined) is at least the size of X times the military strength of the specified country	Country	
military_strength = {
	who = FROM
	value = 2.0
}
nationalism	Integer	Returns true if province has at least X years of separatism remaining.	Province	nationalism = 5
national_focus	Identifier	Returns true if country has set the national focus to X.	Country	national_focus = ADM
nation_designer_points	Identifier	Returns true if at least X points were used when creating the custom nation.	Country	nation_designer_points = 802
native_ferocity	Integer	Returns true if ferocity of natives in the province is at least X.	Province	native_ferocity = 3
native_hostileness	Integer	Returns true if hostileness of natives in the province is at least X.	Province	native_hostileness = 2
native_size	Integer	Returns true if size of natives in the province is at least X.	Province	native_size = 30
naval_forcelimit	Integer	Returns true if the country has a naval force limit of at least X.	Country	naval_forcelimit = 24
Tag, Scope	Returns true if the country has a naval force limit of at least as much ships than the specified country.	Country	naval_forcelimit = SWE
naval_maintenance	Float	Returns true if the country's naval maintenance slider is at least X fraction of maximum.	Country	naval_maintenance = 0.33
naval_morale	Float	Returns true if the country has a morale of navies of at least X.	Country	naval_morale = 2.5
Tag, Scope	Returns true if the country has an at least as high morale of navies as the specified country.	Country	naval_morale = GBR
navy_size	Integer	Returns true if the current scope has a navy of at least X ships.	Country	navy_size = 300
Tag, Scope	Returns true if the current scope has a navy at least as large as the specified country.	Country	navy_size = SPA
navy_size_percentage	Integer	Returns true if the ratio of the total navy size of the country to its naval force limit is at least X.	Country	navy_size_percentage = 0.50
naval_strength	Clause	Returns true if the country's navy size is at least the size of X times the navy size of the specified country.	Country	
naval_strength = {
	who = ENG
	value = 0.5
}
navy_tradition	Integer	Returns true if the country has a navy tradition of at least X.	Country	navy_tradition = 95
Tag, Scope	Returns true if the country has an at least as high navy tradition as specified country.	Country	navy_tradition = GBR
normal_or_historical_nations	Boolean	Returns true if game is set to use normal or historical nations.	Anywhere	normal_or_historical_nations = yes
normal_province_values	Boolean	Returns true if game is set to use normal province values.	Anywhere	normal_province_values = yes
num_accepted_cultures	Integer	Returns true if the country has at least X accepted cultures.	Country	num_accepted_cultures = 1
num_free_building_slots	Integer	Returns true if the province has at least X building slots remaining.	Province	num_free_building_slots = 1
num_of_active_blessings	Integer	Returns true if the country has enabled at least X blessings.	Country	num_of_active_blessings = 5
num_of_admirals	Integer	Returns true if the country has at least X admirals.	Country	num_of_admirals = 2
Tag, Scope	Returns true if the country has at least as much admirals than the specified country.	Country	num_of_admirals = SPA
num_of_admirals_with_traits	Integer	Returns true if the country has at least X admirals with traits.	Country	num_of_admirals_with_traits = 1
num_of_allies	Integer	Return true if the country has at least X allies.	Country	num_of_allies = 7
Tag, Scope	Returns true if the country has at least as much allies than the specified country.	Country	num_of_allies = ARA
num_of_artillery	Integer	Returns true if the country has at least X artillery regiments.	Country	num_of_artillery = 12
Tag, Scope	Returns true if the country has at least as much artillery regiments than the specified country.	Country	num_of_artillery = FRA
num_of_aspects	Integer	Returns true if the country has at least X church aspects.	Country	num_of_aspects = 2
Tag, Scope	Returns true if the country has at least as much church aspects than the specified country.	Country	num_of_aspects = SWE
num_of_banners	Integer	Returns true if the country has at least X banner units.	Country	num_of_banners = 3
num_of_cardinals	Integer	Returns true if the country has at least X cardinals in the Holy See.	Country	num_of_cardinals = 3
Tag, Scope	Returns true if the country has at least as much cardinals than the specified country.	Country	num_of_cardinals = FRA
num_of_cavalry	Integer	Returns true if the country has at least X cavalry regiments.	Country	num_of_cavalry = 23
Tag, Scope	Returns true if the country has at least as much cavalry regiments than the specified country.	Country	num_of_cavalry = FRA
num_of_cities	Integer	Returns true if the country owns at least X cities.	Country	num_of_cities = 15
Tag, Scope	Returns true if the country owns at least as much cities than the specified country.	Country	num_of_cities = ROOT
num_of_coalition_members	Integer	Returns true if the country is in a coalition of at least X members.	Country	num_of_coalition_members = 6
num_of_colonies	Integer	Returns true if the country has at least X unfinished colonies.	Country	num_of_colonies = 2
num_of_colonists	Integer	Returns true if the country has at least X colonists.	Country	num_of_colonists = 2
num_of_conquistadors	Integer	Returns true if the country has at least X conquistadors.	Country	num_of_conquistadors = 2
Tag, Scope	Returns true if the country has at least as much conquistadors than the specified country.	Country	num_of_conquistadors = ROOT
num_of_continents	Integer	Returns true if the country owns provinces on at least X continents. Only provinces owned by the country itself are taken into account, not provinces owned by subjects.	Country	num_of_continents = 3
num_of_cossacks	Integer	Returns true if the country has at least X cossack units.	Country	num_of_cossacks = 3
num_of_custom_nations	Integer	Returns true if there are at least X custom nations in the game.	Country	num_of_custom_nations = 1
num_of_diplomatic_relations	Integer	Returns true if the country has at least X diplomatic relations.	Country	num_of_diplomatic_relations = 3
num_of_diplomats	Integer	Returns true if the country has at least X diplomats.	Country	num_of_diplomats = 2
num_of_electors	Integer	Returns true if there are at least X electors of the HRE.	Anywhere	num_of_electors = 7
num_of_explorers	Integer	Returns true if the country has at least X explorers.	Country	num_of_explorers = 1
Tag, Scope	Returns true if the country has at least as much explorers than the specified country.	Country	num_of_explorers = ENG
num_of_free_diplomatic_relations	Integer	Returns true if the country has at least X free diplomatic relations slots.	Country	num_of_free_diplomatic_relations = 1
num_of_galley	Integer	Returns true if the country has at least X galleys.	Country	num_of_galley = 20
Tag, Scope	Returns true if the country has at least as much galleys than the specified country.	Country	num_of_galley = VEN
num_of_generals	Integer	Returns true if the country has at least X generals.	Country	num_of_generals = 2
Tag, Scope	Returns true if the country has at least as much generals than the specified country.	Country	num_of_generals = FROM
num_of_generals_with_traits	Integer	Returns true if the country has at least X generals with traits.	Country	num_of_generals_with_traits = 1
num_of_harmonized	Integer	Returns true if the country has harmonized with at least X religions or religion groups.	Country	num_of_harmonized = 2
num_of_heavy_ship	Integer	Returns true if the country has at least X heavy ships.	Country	num_of_heavy_ship = 20
Tag, Scope	Returns true if the country has at least as much heavy ships than the specified country.	Country	num_of_heavy_ship = ENG
num_of_infantry	Integer	Returns true if the country has at least X infantry regiments.	Country	num_of_infantry = 300
Tag, Scope	Returns true if the country has at least as much infantry regiments than the specified country.	Country	num_of_infantry = FROM
num_of_light_ship	Integer	Returns true if the country has at least X light ships.	Country	num_of_light_ship = 20
Tag, Scope	Returns true if the country has at least as much light ships than the specified country.	Country	num_of_light_ship = GEN
num_of_loans	Integer	Returns true if the country has at least X loans.	Country	num_of_loans = 15
Tag, Scope	Returns true if the country has taken at least as much loans than the specified country.	Country	num_of_loans = LIT
num_of_marches	Integer	Returns true if the country has at least X marches.	Country	num_of_marches = 2
Tag, Scope	Returns true if the country has at least as much marches than the specified country.	Country	num_of_marches = POL
num_of_mercenaries	Integer	Returns true if the country has at least X mercenaries.	Country	num_of_mercenaries = 10
Tag, Scope	Returns true if the country has at least as much mercenaries than the specified country.	Country	num_of_mercenaries = TUR
num_of_merchants	Integer	Returns true if the country has at least X merchants.	Country	num_of_merchants = 3
num_of_missionaries	Integer	Returns true if the country has at least X missionaries.	Country	num_of_missionaries = 2
num_of_owned_and_controlled_institutions	Integer	Returns true if the country owns and controlls at least X provinces that are institution origins.	Country	num_of_owned_and_controlled_institutions = 2
num_of_owned_provinces_with	Clause	Returns true if at least X provinces of the scoped country match the specified condition(s).	Country	
num_of_owned_provinces_with = {
	value = 15
	has_owner_accepted_culture = no
	NOT = { culture = root }
	is_overseas = no
}
num_of_ports	Integer	Returns true if country owns at least X home ports (in lands contiguously connected to the capital).	Country	num_of_ports = 20
Tag, Scope	Returns true if the country has at least as much home ports than the specified country.	Country	num_of_ports = MNG
num_of_ports_blockading	Integer	Returns true if the country blockades at least X ports.	Country	num_of_ports_blockading = 10
num_of_powerful_estates	Integer	Returns true if the country has at least X estates with at least 70 influence.	Country	num_of_powerful_estates = 2
num_of_protectorates	Integer	Returns true if the country has at least X protectorates.	Country	num_of_protectorates = 2
Tag, Scope	Returns true if the country has at least as much protectorates than the specified country.	Country	num_of_protectorates = POR
num_of_provinces_in_states	Integer	Returns true if the country has at least X provinces is states.	Country	num_of_provinces_in_states = 14
num_of_provinces_in_territories	Integer	Returns true if the country has at least X provinces is territories.	Country	num_of_provinces_in_territories = 12
num_of_rebel_armies	Integer	Returns true if the number of rebel armies in the country is at least X.	Country	num_of_rebel_armies = 3
Tag, Scope	Returns true if there are at least as much rebel armies in the country than the specified country.	Country	num_of_rebel_armies = SWI
num_of_rebel_controlled_provinces	Integer	Returns true if the number of rebel controlled provinces in the country is at least X.	Country	num_of_rebel_controlled_provinces = 3
Tag, Scope	Returns true if the country has at least as much rebel controlled provinces than the specified country.	Country	num_of_rebel_controlled_provinces = TIM
num_of_religion	Clause	Float value: Returns true if the ratio of the provinces with the specified religion to the total provinces of the country is at least X.
Integer value: Returns true if the country has at least X provinces with the specified religion.
It is also possible to specify the secondary religion by secondary = yes.	Country	
num_of_religion = {
	religion = animism
	value = 0.3
}
num_of_revolts	Integer	Returns true if the number of revolts in the country is at least X.
The same as ‘num_of_rebel_controlled_provinces’.	Country	num_of_revolts = 3
Tag, Scope	Returns true if the country has at least as much rebel controlled provinces than the specified country.	Country	num_of_revolts = TIM
num_of_royal_marriages	Integer	Returns true if the country has at least X royal marriages.	Country	num_of_royal_marriages = 2
Tag, Scope	Returns true if the country has at least as much royal marriages than the specified country.	Country	num_of_royal_marriages = ENG
num_of_states	Integer	Returns true if the country has at least X states.	Country	num_of_states = 8
num_of_streltsy	Integer	Returns true if the country has at least X streltsy units.	Country	num_of_streltsy = 3
num_of_strong_trade_companies	Integer	Returns true if the country has at least X strong trade companies.	Country	num_of_strong_trade_companies = 4
num_of_subjects	Integer	Returns true if the country is the overlord of at least X subject countries of any type.	Country	num_of_subjects = 1
num_of_territories	Integer	Returns true if the country has at least X territories (areas that aren't states).	Country	num_of_territories = 10
num_of_times_improved	Integer	Returns true if the development of the province was improved at least X times.	Province	num_of_times_improved = 5
num_of_total_ports	Integer	Returns true if the country owns at least X total ports (anywhere in the world).	Country	num_of_total_ports = 20
Tag, Scope	Returns true if the country owns at least as much total ports than the specified country.	Country	num_of_total_ports = JAP
num_of_trade_embargos	Integer	Returns true if the country has at least X trade embargos.	Country	num_of_trade_embargos = 3
num_of_trading_bonuses	Integer	Returns true if the country hasat least X ‘trading in’ bonuses.	Country	num_of_trading_bonuses = 7
num_of_transport	Integer	Returns true if the country has at least X transports.	Country	num_of_transport = 24
Tag, Scope	Returns true if the country has at least as much transports than the specified country.	Country	num_of_transport = DEN
num_of_trusted_allies	Integer	Returns true if the country has at least X allies with 100 trust.	Country	num_of_trusted_allies = 3
num_of_unions	Integer	Returns true if the country has at least X personal unions.	Country	num_of_unions = 3
Tag, Scope	Returns true if the country has at least as much personal unions than the specified country. Note: this no longer works. personal_union = x is the new format, eg personal_union = 2.	Country	num_of_unions = BUR
num_of_units_in_province	Clause	Returns true if the specified country has at least X units of the specified type in the province. (type and who are not needed, if not included will default to all.)	Province	
num_of_units_in_province = {
    who =
    type =
    amount =
}
num_of_unlocked_cults	Integer	Returns true if the country has unlocked at least X cults.	Country	num_of_unlocked_cults = 13
num_of_vassals	Integer	Returns true if the country has at least X vassals.	Country	num_of_vassals = 3
Tag, Scope	Returns true if the country has at least as much vassals than the specified country.	Country	num_of_vassals = POL
num_of_war_reparations	Integer	Returns true if the country receives war reparations from at least X countries.	Country	num_of_war_reparations = 4
Tag, Scope	Returns true if the country receives war reparations from at least as much countries than the specified country.	Country	num_of_war_reparations = ROOT
num_ships_privateering	Integer	Returns true if country has at least X ships privateering.	Country	num_ships_privateering = 20
Tag, Scope	Returns true if the country has at least as much ships privateering than the specified country.	Country	num_ships_privateering = HSA
offensive_war_with	Tag, Scope	Returns true if the country is in an offensive war with country X.	Country	offensive_war_with = ROOT
overextension_percentage	Float	Returns true if country has at least X% overextension.	Country	overextension_percentage = 0.75
overlord_of	Tag, Scope	Returns true if the country is the overlord of X.	Country	overlord_of = FRA
overseas_provinces_percentage	Float	Returns true if the country has X percentage of overseas provinces.	Country	overseas_provinces_percentage = 0.05
owned_by	Tag, Scope	Returns true if the province is owned by the country X.	Province	owned_by = TUR
owns	Province ID	Returns true if the country owns the specified province.	Country	owns = 236
owns_core_province	Province ID	Returns true if the country owns and has a core on the specified province.	Country	owns_core_province = 217
owns_or_non_sovereign_subject_of	Province ID, Scope	Returns true if the country or a subject that is not categorized as "sovereign" (e.g. tributary states are excluded) owns the specified province.	Country	owns_or_non_sovereign_subject_of = 151
owns_or_subject_of	Province ID, Scope	Returns true if the country or a subject owns the specified province.	Country	owns_or_subject_of = 151
papacy_active	Boolean	Returns true if the papacy is active.	Anywhere	papacy_active = yes
papal_influence	Integer	Returns true if the country's papal influence is at least X.	Country	papal_influence = 100
Tag, Scope	Returns true if the country has at least as much papal influence as the specified country.	Country	papal_influence = KID
patriarch_authority	Float	Returns true if the country's patriarch authority is at least X.	Country	patriarch_authority = 0.75
percentage_backing_issue	Float	Returns true if at least the Xth part of the seats in the parliament is backing for the current issue.	Country	percentage_backing_issue = 0.5
personality	Identifier	Returns true if the country has a ruler which personality is X.	Country	personality = ai_militarist
piety	Float	Returns true if the country's piety is at least X.	Country	piety = -0.75
Tag, Scope	Returns true if the country has at least as much piety as the specified country.	Country	piety = MOR
preferred_emperor	Tag, Scope	Returns true if an elector has the country X is the preferred emperor.	Country (Elector)	preferred_emperor = HAB
prestige	Integer	Return true if the country has a prestige of at least X.	Country	prestige = 99
Tag, Scope	Returns true if the country has at least as much prestige as the specified country.	Country	prestige = ADA
previous_owner	Tag, Scope	Returns true if the previous owner of the province was X.	Province	previous_owner = HUN
primary_culture	Identifier, Scope	Returns true if the country's primary culture is X.	Country	primary_culture = dutch
primitives	Boolean	Returns true if the country is primitive.	Country	primitives = yes
privateer_power	Clause	Returns true if the country has at least X trade power from privateering in the trade node.	Province
(Trade node)	
1744 = { #Antwerpen
	privateer_power = {
		country = FROM
		share = 25
	}
}
production_efficiency	Float	Returns true if the country has a production efficiency of at least X.	Country	production_efficiency = 0.10
Tag, Scope	Returns true if the country has an at least as high production efficiency as the specified country.	Country	production_efficiency = AAC
production_income_percentage	Float	Returns true if the ratio of production income to total income is at least X.	Country	production_income_percentage = 0.10
production_leader	Clause	Returns true if the country is the production leader of the trade good X.	Country	
production_leader = {
	trade_goods = coffee
}
province_distance	Clause	Returns true if the distance between specified provinces is at least X.	Province	
any_owned_province = {
	province_distance = {
		who = 151
		distance = 50
	}
}
province_id	Integer,Scope	Returns true if the province has the ID X.	Province	province_id = 1
province_group	Identifier	Returns true if the province belongs to the specified province group.	Province	province_group = my_province_group
province_trade_power	Integer	Returns true if trade power generated by the province is at least X.	Province	province_trade_power = 5
provinces_on_capital_continent_of	Scope	Returns true if the country has a province on the continent with the capital of the specified country.	Country	provinces_on_capital_continent_of = ROOT
pure_unrest	Integer	Returns true if the province has a base unrest of at least X.	Province	pure_unrest = 2
range	Tag, Scope	Returns true if the province is within the range of the specified country.	Province	range = TUR
real_day_of_year	Integer	Returns true if today is X. Refers to the actual real day (probably takes system time).	Anywhere	[example needed]
real_month_of_year	Integer	Returns true if the month of the year in reality is at least X (January ≙ 0)	Anywhere	real_month_of_year = 6 # Mai
reform_desire	Float	Returns true if the reform desire is at least X%.	Anywhere	reform_desire = 0.95
region	Identifier	Returns true if the province is part of the region X.	Province	region = west_india_region
religion	Identifier, Scope	Returns true if the country/province has religion X.
Note: Within province scope religion = secondary returns true if the province religion matches the secondary/syncretic religion of the owner.	Country
Province	religion = catholic
religion_group	Identifier, Scope	Returns true if the country/province has a religion of the specified religious group.	Country
province	religion_group = christian
religion_group_claim	Identifier	Returns true if the country has the same religion as country X	Region	religion_group_claim = FROM
religion_years	Clause	Returns true if the specified religion is enabled for at least X years.	Anywhere	religion_years = { confucianism = 100 }
religious_school	Clause	Returns true if the country has the specified religious school.	Country	
religious_school = {
	group = muslim
	school = enum[religious_schools]
}
religious_unity	Float	Returns true if the country's religious unity is at least X.	Country	religious_unity = 0.99
republican_tradition	Integer	Returns true if country's republican tradition is at least X.	Country	republican_tradition = 90
revanchism	Integer	Returns true if country's revanchism is at least X.	Country	revanchism = 10
reverse_has_opinion	Clause	Returns true if the country specified by who has at least value opinion of the country.	Country	
reverse_has_opinion = {
	who = DAN
	value = 80
}
reverse_has_opinion_modifier	Clause	Returns true if the country specified by who has the opinion modifier modifier towards the country.
Can also specify a value of the modifier (but it is not displayed).	Country	
reverse_has_opinion_modifier = {
	who = ROOT
	modifier = opinion_spurned_pu
}
revolt_percentage	Float	Returns true if at least the Xth part of the provinces of the country have revolts.	Country	revolt_percentage = 0.1
revolution_target_exists	Boolean	Returns true if there is a revolutionary target in the world.		revolution_target_exists = yes
ruler_age	Integer	Returns true if the country has a ruler that is at least X years old.	Country	ruler_age = 40
ruler_consort_marriage_length	Integer	[needs description]	Country	ruler_consort_marriage_length = 10
ruler_culture	Identifier, Scope	Returns true if the country's ruler has the specified culture. Can utilise Event Scope Values.	Country	ruler_culture = prussian
ruler_has_personality	Identifier	Returns true if the country’s ruler has the specified personality.	Country	ruler_has_personality = malevolent_personality
ruler_is_foreigner	Boolean	Returns true if the country has foreign ruler.	Country	ruler_is_foreigner = no
ruler_religion	Identifier, Scope	Returns true if the country's ruler has the specified religion. Can utilise Event Scope Values.	Country	ruler_religion = catholic
sailors	Integer	Returns true if the country has at least X sailors.	Country	sailors = 2500
sailors_percentage	Float	Returns true if the country has a sailor level of at least X%.	Country	sailors_percentage = 0.50
same_continent	CAPITAL, Province Scope	Returns true if specified provinces are on the same continent. If used in country scope, capitals are checked.	Country, Province	
FRA = {
	same_continent = ROOT
}
any_owned_province = {
	same_continent = CAPITAL
}
secondary_religion	Identifier	Returns true the secondary religion of the country is X.	Country	secondary_religion = ibadi
senior_union_with	Tag, Scope	Returns true if the country is the senior partner in a personal union over country X.	Country	senior_union_with = HAB
sieged_by	Tag, Scopes	Returns true if the province is being besieged by country X.	Province	sieged_by = ROOT
splendor	Integer	Returns true if the country has at least X splendor.	Country	splendor = 800
stability	Integer	Returns true if the country has a stability of at least X.	Country	stability = 1
Tag, Scope	Returns true if the country has at least as much stability than the specified country.	Country	stability = HAB
start_date	Date	Returns true if the start date of the campaign is X.	Anywhere	start_date = 1776.7.4
started_in	Date	Returns true if the start date of the campaign is X or after.	Anywhere	started_in = 1776.7.4
statists_vs_orangists	Float	Returns true if Statists vs Orangists is at least X.	Country	statists_vs_orangists = 0.9
subsidised_percent_amount	Float	Returns true if the country receives subsidies of at least X% of its monthly income.	Country	subsidised_percent_amount = 0.5
succession_claim	Tag, Scope	Returns true if the country has claimed the throne of the country X.	Country	succession_claim = FROM
superregion	Identifier	Returns true if the province belongs to the superregion X.	Province	superregion = east_indies_superregion
tag	Tag, Scope	Returns true if the country is the specified country.	Country	tag = HAB
tariff_value	Float	Returns true if the colonial nation pays at least X% tariffs.	Country	tariff_value = 0.25
tax_income_percentage	Float	Returns true if the ratio of tax income to total income is at least X.	Country	tax_income_percentage = 0.2
tech_difference	Integer	Returns true if the scoped country is at least X technologies ahead (compared to the country).	Country	
any_neighbor_country = {
	tech_difference = 3
} 
technology_group	Identifier	Returns true if the country has the technology group X.	Country	technology_group = western
Scope	Returns true if the countries have the same technology group.	Country	technology_group = PREV
tolerance_to_this	Integer	Returns true if the country has a tolerance of at least X towards the religion of the country or scoped province.	Country Province	tolerance_to_this = 0
total_base_tax	Integer	Returns true if the base tax of the country's provinces totals at least X.	Country	total_base_tax = 75
Tag, Scope	Returns true if the country has at least as much total base tax as the specified country.	Country	total_base_tax = MNG
total_development	Integer	Returns true if the country has a total development of at least X.	Country	total_development = 200
total_number_of_cardinals	Integer	Returns true if the total number of cardinals is at least X.	Anywhere	total_number_of_cardinals = 49
trade_league_embargoed_by	Tag, Scope	[description needed]	Country	trade_league_embargoed_by = FROM
transports_in_province	Integer	Returns true if there are at least X transports in the province.	Province	transports_in_province = 10
Tag, Scope	Returns true if there are transports from the specified country in the province.	Province	transports_in_province = TER
trade_company_size	Integer	Returns true if the trade company has at least X provinces.	Province	trade_company_size = 5
trade_efficiency	Float	Returns true if the country has a trade efficiency over X.	Country	trade_efficiency = 0.50
trade_embargoing	Tag, Scope	Returns true if the country is embargoing country X.	Country	trade_embargoing = HAB
trade_embargo_by	Tag, Scope	Returns true if country X is embargoing the country.	Country	trade_embargo_by = HAB
trade_goods	Identifier	Returns true if the province is producing the trade good X.	Province	trade_goods = fur
trade_income_percentage	Float	Returns true if the ratio of trade income to total income is at least X.	Country	trade_income_percentage = 0.10
trade_range	Tag, Scope	Returns true if the trade node is within the trade range of the specified country.	Province
(Trade node)	trade_range = ENG
trade_share	Clause	Returns true if the country controls at least X% of the trade in the specified trade node.	Province
(Trade node)	
1744 = { #Antwerpen
	trade_share = {
		country = NED
		share = 25
	}
}
trading_bonus	Clause	Returns true if the country has the ‘trading in’ bonus of the specified trade good.	Country	
trading_bonus = {
	trade_goods = coffee
	value = yes
}
trading_part	Clause	Returns true if the country has access to X% of the world market of the specified trade good.	Country	
trading_part = {
	trade_goods = cocoa
	value = 0.05
}
trading_policy_in_node	Clause	Returns true if the country has the specified trading policy in the specified trade node. Can also use "policy = any".	Country	
any_active_trade_node = {
	ROOT = {
		trading_policy_in_node = {
			node = PREV
			policy = propagate_religion
		}
	}
}
transport_fraction	Float	Returns true if the ratio of the transport fraction to the navy size of the country is at least X.	Country	transport_fraction = 0.55
treasury	Integer	Returns true if country's treasury contains at least X ducats.	Country	treasury = 100
Tag, Scope	Returns true if the country has at least as much ducats in its treasury as the specified country.	Country	treasury = ROOT
tribal_allegiance	Integer	Returns true if the country has a tribal allegiance of at least X.	Country	tribal_allegiance = 10
truce_with	Tag, Scope	Returns true if the country has a truce with X.	Country	truce_with = FRA
unit_has_leader	yes	Returns true if any unit is in the province has a leader.
Warning: Works only with 'yes'.	Province	unit_has_leader = yes
unit_in_battle	Boolean	Returns true if any unit in the province is in a battle.	Province	unit_in_battle = no
unit_in_siege	Boolean	Returns true if any unit in the province is in a siege.	Province	unit_in_siege = yes
units_in_province	Integer	Returns true if there are at least X units in the province.	Province	units_in_province = 1
Tag, Scope	Returns true if the specified country has units in the province.	Province	units_in_province = RUS
unit_type	Identifier	Returns true if the country has units of type X.	Country	unit_type = sub_saharan
unrest	Integer	Returns true if the unrest in the province is at least X.	Province	unrest = 3
uses_authority	Boolean	Returns true if the country uses authority mechanics.	Country	uses_authority = yes
uses_church_aspects	Boolean	Returns true if the country uses church aspects mechanics.	Country	uses_church_aspects = yes
uses_blessings	Boolean	Returns true if the country uses blessings mechanics.	Country	uses_blessings = yes
uses_cults	Boolean	Returns true if the country uses cults mechanics.	Country	uses_cults = yes
uses_devotion	Boolean	Returns true if the country uses devotion instead of legitimacy.	Country	uses_devotion = yes
uses_doom	Boolean	Returns true if the country uses doom mechanics.	Country	uses_doom = yes
uses_fervor	Boolean	Returns true if the country uses fervor mechanics.	Country	uses_fervor = yes
uses_isolationism	Boolean	Returns true if the country uses the isolationism mechanic.	Country	uses_isolationism = yes
uses_karma	Boolean	Returns true if the country uses karma mechanics.	Country	uses_karma = yes
uses_papacy	Boolean	Returns true if the country uses papacy mechanics.	Country	uses_papacy = yes
uses_patriarch_authority	Boolean	Returns true if the country uses patriarch authority mechanics.	Country	uses_patriarch_authority = yes
uses_personal_deities	Boolean	Returns true if the country uses personal deities mechanics.	Country	uses_personal_deities = yes
uses_piety	Boolean	Returns true if the country uses piety mechanics.	Country	uses_piety = yes
uses_religious_icons	Boolean	Returns true if the country uses religious icons.	Country	uses_religious_icons = yes
uses_syncretic_faiths	Boolean	Returns true if the country uses syncretic faiths mechanics.	Country	uses_syncretic_faiths = yes
variable_arithmetic_trigger	Clause	Can use variable effects and triggers to compare or change and compare modifier and trigger values. "variable_arithmetic_trigger" sections can include more "variable_arithmetic_trigger" sections. This has to be done for effects such as "change_variable" or effects of "if" sections inside the "variable_arithmetic_trigger", since the game may crash otherwise.	Anywhere	
variable_arithmetic_trigger = {
	custom_tooltip = from_total_development_is_10_times_bigger_than_ours
	export_to_variable = {
		which = our_total_development
		value = trigger_value:total_development
	}
	export_to_variable = {
		which = from_total_development
		value = trigger_value:total_development
		who = FROM
	}
	multiply_variable = { which = from_total_development value = 10 }
	
	check_variable = { which = from_total_development which = our_total_development }
}
vassal_of	Tag, Scope	Returns true if the country is a vassal of country X.	Country	vassal_of = ROOT
war_exhaustion	Integer	Returns true if the country has a war exhaustion of at least X.	Country	war_exhaustion = 8
Tag, Scope	Returns true if the country has at least as much war exhaustion as the specified country.	Country	war_exhaustion = NPL
war_score	Integer	Returns true if the coutry has a warscore of at least X%.	Country	war_score = 100
war_score_against	Clause	Returns true if the coutry has a warscore of at least X against the specified country.	Country	
war_score_against = {
	who = INC
	value = 75
}
war_with	Tag, Scope	Returns true if the country is at war with country X.	Country	war_with = INC
was_never_end_game_tag_trigger	Boolean	Returns false if the country was ever an end game tag i.e. a tag that is not intended to form another nation	Country	was_never_end_game_tag_trigger = yes
was_player	Boolean	Returns true if the country was controlled by a human player.	Country	was_player = no
will_back_next_reform	Boolean	Returns true if the member of the HRE is backing the next imperial reform.	Country	will_back_next_reform = yes
yearly_corruption_increase	Float	Returns true if the country has a yearly corruption increase of at least X.	Country	NOT = { yearly_corruption_increase = 0.001 }
years_in_union_under	Clause	Returns true if the country is in a personal union under the specified country for at least X years.	Country	
years_in_union_under = {
	who = ROOT
	years = 50
}
years_in_vassalage_under	Clause	Returns true if the country is a vassal of the specified country for at least X years.	Country	
years_in_vassalage_under = {
	who = ROOT
	years = 10
}
years_of_income	Float	Returns true if the country's treasury contains ducats of at least X times their yearly income.	Country	years_of_income = 1.0
Tag, Scope	Returns true if the country's treasury contains ducats of at least the yearly income of the specified country.	Country	years_of_income = SER